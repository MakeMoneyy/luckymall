简化版阶段一需求文档 - 基础电商系统

## 1. 项目概述

### 1.1 项目背景

搭建一个基础的电商系统原型，重点实现商品展示和搜索功能，其他模块提供基础展示功能，为后续AI功能集成奠定基础。

### 1.2 项目目标

- 实现完整的商品展示和搜索功能
- 其他模块提供基础展示界面
- 建立稳定的前后端架构
- 完成数据库设计与实现

## 2. 技术栈

### 2.1 前端技术栈

- **框架**: React 或 Vue.js
- **UI组件**: Ant Design 或 Element UI
- **状态管理**: Redux/Vuex
- **路由**: React Router/Vue Router

### 2.2 后端技术栈

- **开发语言**: Java 11+
- **框架**: Spring Boot 2.7+
- **ORM**: MyBatis
- **数据库**: MySQL 8.0
- **缓存**: Redis（可选）

## 3. 功能需求

### 3.1 商品展示模块（核心功能）

#### 3.1.1 商品列表页

- **功能描述**: 展示所有商品，支持分页显示
- **页面元素**:
  - 商品缩略图
  - 商品名称
  - 商品价格
  - 商品简介
  - 库存状态
  - 销量信息
- **交互功能**:
  - 点击商品跳转到详情页
  - 分页导航
  - 简单的分类筛选

#### 3.1.2 商品详情页

- **功能描述**: 展示单个商品的详细信息
- **页面元素**:
  - 商品图片轮播
  - 商品详细描述
  - 价格信息
  - 库存数量
  - 用户评价（显示）
  - 购买按钮（暂时无功能）
  - 加入购物车按钮（暂时无功能）

### 3.2 基础搜索模块（核心功能）

#### 3.2.1 商品搜索

- **功能描述**: 支持商品名称关键词搜索
- **搜索特性**:
  - 模糊匹配
  - 关键词高亮显示
  - 搜索结果分页
  - 按价格、销量排序
- **搜索界面**:
  - 搜索框
  - 搜索按钮
  - 搜索结果列表
  - 筛选条件（价格区间、分类）

### 3.3 用户管理模块（基础展示）

#### 3.3.1 用户注册/登录界面

- **功能描述**: 提供用户注册和登录的界面展示
- **界面元素**:
  - 注册表单（用户名、密码、邮箱、手机号）
  - 登录表单（用户名/邮箱 + 密码）
  - 基础的表单验证
  - 登录状态显示
- **简化实现**: 可以使用模拟数据，不需要复杂的认证逻辑

### 3.4 购物车模块（基础展示）

#### 3.4.1 购物车界面

- **功能描述**: 展示购物车的基本界面
- **界面元素**:
  - 购物车商品列表
  - 商品名称、图片、价格
  - 数量选择器（界面）
  - 删除按钮（界面）
  - 总价计算显示
  - 结算按钮（界面）
- **简化实现**: 使用前端模拟数据，不需要后端存储

### 3.5 订单管理模块（基础展示）

#### 3.5.1 订单界面

- **功能描述**: 展示订单管理的基本界面
- **界面元素**:
  - 订单列表页面
  - 订单详情页面
  - 订单状态显示
  - 收货地址表单
  - 支付方式选择
- **简化实现**: 使用模拟订单数据展示

## 4. 数据库设计

### 4.1 核心数据表

#### 4.1.1 用户表 (users)

```sql
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

#### 4.1.2 商品表 (products)

```sql
CREATE TABLE products (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0,
    category_id BIGINT,
    image_url VARCHAR(500),
    sales_count INT DEFAULT 0,
    status TINYINT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

#### 4.1.3 商品分类表 (categories)

```sql
CREATE TABLE categories (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    parent_id BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## 5. API设计

### 5.1 商品相关API（核心功能）

- `GET /api/products` - 获取商品列表（支持分页、筛选）
- `GET /api/products/{id}` - 获取商品详情
- `GET /api/products/search` - 搜索商品
- `GET /api/categories` - 获取商品分类

### 5.2 基础展示API（简化实现）

- `POST /api/users/register` - 用户注册（可返回模拟数据）
- `POST /api/users/login` - 用户登录（可返回模拟数据）
- `GET /api/cart` - 获取购物车（返回模拟数据）
- `GET /api/orders` - 获取订单列表（返回模拟数据）

## 6. 系统架构

### 6.1 整体架构

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   前端应用       │    │   后端API服务    │    │   MySQL数据库   │
│   (React/Vue)   │◄──►│  (Spring Boot)  │◄──►│                │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### 6.2 分层架构

- **展示层**: React/Vue前端界面
- **控制层**: Spring Boot Controllers
- **服务层**: Service业务逻辑处理
- **数据访问层**: MyBatis ORM
- **数据存储层**: MySQL数据库

## 7. 验收标准

### 7.1 核心功能验收

- [ ] 商品列表页正常展示和分页
- [ ] 商品详情页完整展示
- [ ] 商品搜索功能正常工作
- [ ] 搜索结果筛选和排序功能
- [ ] 分类筛选功能

### 7.2 基础展示验收

- [ ] 用户注册/登录界面完整
- [ ] 购物车界面展示正常
- [ ] 订单管理界面展示正常
- [ ] 界面交互友好

### 7.3 技术验收

- [ ] 前后端分离架构清晰
- [ ] 数据库设计合理
- [ ] API接口可用
- [ ] 代码规范符合要求

## 8. 开发计划

### 8.1 开发阶段

- **第1-2天**: 环境搭建、数据库设计
- **第3-4天**: 商品展示模块开发（核心）
- **第5-6天**: 搜索模块开发（核心）
- **第7-8天**: 基础展示界面开发
- **第9-10天**: 系统整合和测试

### 8.2 交付物

- 完整的可运行系统（前端+后端）
- 程序源代码
- 数据库脚本
- API文档

## 9. 重点说明

### 9.1 开发重点

- **商品展示模块**: 完整功能实现，包括列表、详情、分页等
- **搜索模块**: 完整功能实现，包括关键词搜索、筛选、排序等
- **其他模块**: 重点在界面展示，功能可以简化或使用模拟数据

### 9.2 数据准备

- 准备50-100个商品测试数据
- 准备商品分类数据
- 准备用户测试数据
- 准备模拟订单数据用于界面展示