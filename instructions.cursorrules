# 阶段一需求文档 - 基础电商系统

## 1. 项目概述

### 1.1 项目背景

搭建一个基础的电商系统原型，包含核心的商品展示、用户管理、订单处理等功能，为后续AI功能集成奠定基础。

### 1.2 项目目标

- 实现完整的电商系统基础功能
- 建立稳定的前后端架构
- 完成数据库设计与实现
- 提供良好的用户体验和系统可扩展性

## 2. 技术栈

### 2.1 前端技术栈

- **框架**: React 或 Vue.js
- **UI组件**: Ant Design 或 Element UI
- **状态管理**: Redux/Vuex
- **路由**: React Router/Vue Router

### 2.2 后端技术栈

- **开发语言**: Java 11+
- **框架**: Spring Boot 2.7+
- **ORM**: MyBatis
- **数据库**: MySQL 8.0

## 3. 功能需求

### 3.1 商品展示模块

#### 3.1.1 商品列表页

- **功能描述**: 展示所有商品，支持分页显示

- 页面元素

  :

  - 商品缩略图
  - 商品名称
  - 商品价格
  - 商品简介
  - 库存状态
  - 销量信息

- 交互功能

  :

  - 点击商品跳转到详情页
  - 分页导航
  - 简单的分类筛选

#### 3.1.2 商品详情页

- **功能描述**: 展示单个商品的详细信息

- 页面元素

  :

  - 商品图片轮播
  - 商品详细描述
  - 价格信息
  - 库存数量
  - 用户评价（显示）
  - 购买按钮
  - 加入购物车按钮

### 3.2 用户管理模块

#### 3.2.1 用户注册

- **功能描述**: 新用户创建账号

- 输入字段

  :

  - 用户名
  - 密码
  - 邮箱
  - 手机号

#### 3.2.2 用户登录

- **功能描述**: 已有用户登录系统
- **登录方式**: 用户名/邮箱 + 密码

### 3.3 购物车模块

#### 3.3.1 购物车管理

- **功能描述**: 用户可以管理购物车中的商品

- 核心功能

  :

  - 添加商品到购物车
  - 修改商品数量
  - 删除购物车商品
  - 清空购物车
  - 计算总价

- **数据持久化**: 登录用户购物车数据存储在数据库

### 3.4 订单管理模块

#### 3.4.1 订单创建

- **功能描述**: 用户创建商品订单

- 创建流程

  :

  1. 选择商品和数量
  2. 填写收货地址
  3. 选择支付方式
  4. 确认订单信息
  5. 提交订单

- **库存处理**: 创建订单后自动扣减库存

#### 3.4.2 订单查询

- **功能描述**: 用户查看自己的订单

- 查询功能

  :

  - 订单列表展示
  - 订单详情查看
  - 订单状态追踪
  - 按状态筛选订单

### 3.5 基础搜索模块

#### 3.5.1 商品搜索

- **功能描述**: 支持商品名称关键词搜索

- 搜索特性

  :

  - 模糊匹配

## 4. 数据库设计

### 4.1 核心数据表

#### 4.1.1 用户表 (users)

```sql
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

#### 4.1.2 商品表 (products)

```sql
CREATE TABLE products (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0,
    category_id BIGINT,
    image_url VARCHAR(500),
    sales_count INT DEFAULT 0,
    status TINYINT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

#### 4.1.3 订单表 (orders)

```sql
CREATE TABLE orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    status VARCHAR(20) DEFAULT 'PENDING',
    shipping_address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

#### 4.1.4 订单详情表 (order_items)

```sql
CREATE TABLE order_items (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    order_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### 4.1.5 购物车表 (cart_items)

```sql
CREATE TABLE cart_items (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    product_id BIGINT NOT NULL,
    quantity INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

## 5. API设计

### 5.1 用户相关API

- `POST /api/users/register` - 用户注册
- `POST /api/users/login` - 用户登录
- `GET /api/users/profile` - 获取用户信息
- `PUT /api/users/profile` - 更新用户信息

### 5.2 商品相关API

- `GET /api/products` - 获取商品列表
- `GET /api/products/{id}` - 获取商品详情
- `GET /api/products/search` - 搜索商品

### 5.3 购物车相关API

- `GET /api/cart` - 获取购物车
- `POST /api/cart/items` - 添加商品到购物车
- `PUT /api/cart/items/{id}` - 更新购物车商品数量
- `DELETE /api/cart/items/{id}` - 删除购物车商品

### 5.4 订单相关API

- `POST /api/orders` - 创建订单
- `GET /api/orders` - 获取用户订单列表
- `GET /api/orders/{id}` - 获取订单详情

## 6. 系统架构

### 6.1 整体架构

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   前端应用       │    │   后端API服务    │    │   MySQL数据库   │
│   (React/Vue)   │◄──►│  (Spring Boot)  │◄──►│                │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### 6.2 分层架构

- **展示层**: React/Vue前端界面
- **控制层**: Spring Boot Controllers
- **服务层**: Service业务逻辑处理
- **数据访问层**: MyBatis/Hibernate ORM
- **数据存储层**: MySQL数据库

## 7. 验收标准

### 7.1 功能验收

- [ ] 用户能够成功注册和登录
- [ ] 商品列表和详情页正常展示
- [ ] 购物车功能完整可用
- [ ] 订单创建和查询功能正常
- [ ] 基础搜索功能可用
- [ ] 库存管理正确

### 7.2 技术验收

- [ ] 前后端分离架构清晰
- [ ] 数据库设计合理
- [ ] API接口文档完整
- [ ] 代码规范符合要求
- [ ] 基本的错误处理机制

### 7.3 性能要求

- [ ] 页面加载时间 < 3秒
- [ ] 支持100并发用户
- [ ] 数据库查询优化

## 8. 开发计划

### 8.1 开发阶段

- **第1-2天**: 环境搭建、数据库设计
- **第3-4天**: 用户管理模块开发
- **第5-6天**: 商品展示模块开发
- **第7-8天**: 购物车和订单模块开发
- **第9-10天**: 基础搜索功能和系统测试

### 8.2 交付物

- 完整的可运行系统（前端+后端）
- 程序源代码
- 数据库脚本
- API文档
- 部署说明文档