import React, { useState, useEffect } from 'react';
import { Modal, Button, Progress, Spin, Result, Typography } from 'antd';
import { CustomerServiceOutlined, CloseOutlined, LoadingOutlined } from '@ant-design/icons';
import axios from 'axios';

const { Title, Paragraph, Text } = Typography;

interface HumanServiceTransferProps {
  visible: boolean;
  userId: string;
  sessionId: string;
  onCancel: () => void;
  onComplete: () => void;
}

interface QueueInfo {
  queueLength: number;
  queuePosition: number;
  estimatedWaitTime: number;
}

enum TransferStatus {
  WAITING = 'WAITING',
  IN_PROGRESS = 'IN_PROGRESS',
  COMPLETED = 'COMPLETED',
  CANCELLED = 'CANCELLED',
  ERROR = 'ERROR'
}

const HumanServiceTransfer: React.FC<HumanServiceTransferProps> = ({
  visible,
  userId,
  sessionId,
  onCancel,
  onComplete
}) => {
  const [status, setStatus] = useState<TransferStatus>(TransferStatus.WAITING);
  const [queueInfo, setQueueInfo] = useState<QueueInfo | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [staffName, setStaffName] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(true);

  // 请求人工客服
  useEffect(() => {
    if (visible) {
      requestHumanService();
      
      // 定时获取队列信息
      const timer = setInterval(() => {
        getQueueInfo();
        getSessionStatus();
      }, 5000);
      
      return () => clearInterval(timer);
    }
  }, [visible]);

  // 请求人工客服
  const requestHumanService = async () => {
    try {
      setLoading(true);
      const response = await axios.post('/api/human-service/request', null, {
        params: {
          userId,
          sessionId,
          reason: '用户请求人工客服'
        }
      });
      
      if (response.data.code === 200) {
        setStatus(response.data.data.status as TransferStatus);
        if (response.data.data.staffId) {
          setStaffName(response.data.data.staffId);
          setStatus(TransferStatus.IN_PROGRESS);
        }
      } else {
        setError(response.data.message || '请求人工客服失败');
        setStatus(TransferStatus.ERROR);
      }
    } catch (error) {
      console.error('请求人工客服出错:', error);
      setError('网络错误，请稍后再试');
      setStatus(TransferStatus.ERROR);
    } finally {
      setLoading(false);
    }
  };

  // 获取队列信息
  const getQueueInfo = async () => {
    try {
      const response = await axios.get('/api/human-service/queue-info');
      if (response.data.code === 200) {
        setQueueInfo(response.data.data);
      }
    } catch (error) {
      console.error('获取队列信息出错:', error);
    }
  };

  // 获取会话状态
  const getSessionStatus = async () => {
    try {
      const response = await axios.get('/api/human-service/status', {
        params: {
          userId,
          sessionId
        }
      });
      
      if (response.data.code === 200) {
        const newStatus = response.data.data.status as TransferStatus;
        setStatus(newStatus);
        
        if (newStatus === TransferStatus.IN_PROGRESS) {
          setStaffName(response.data.data.staffId || '客服人员');
        } else if (newStatus === TransferStatus.COMPLETED) {
          onComplete();
        }
      }
    } catch (error) {
      console.error('获取会话状态出错:', error);
    }
  };

  // 取消人工客服请求
  const handleCancel = async () => {
    try {
      await axios.post('/api/human-service/cancel', null, {
        params: {
          sessionId
        }
      });
      onCancel();
    } catch (error) {
      console.error('取消人工客服请求出错:', error);
      onCancel();
    }
  };

  // 渲染等待界面
  const renderWaiting = () => (
    <div style={{ textAlign: 'center', padding: '20px' }}>
      <Spin indicator={<LoadingOutlined style={{ fontSize: 36 }} spin />} />
      <Title level={4} style={{ marginTop: 20 }}>正在为您接入人工客服</Title>
      
      {queueInfo && (
        <>
          <Paragraph>
            当前排队人数: <Text strong>{queueInfo.queueLength}</Text> 人
          </Paragraph>
          <Paragraph>
            预计等待时间: <Text strong>{queueInfo.estimatedWaitTime}</Text> 分钟
          </Paragraph>
          <Progress 
            percent={Math.round((1 - queueInfo.queuePosition / (queueInfo.queueLength + 1)) * 100)} 
            status="active" 
          />
        </>
      )}
      
      <Paragraph style={{ marginTop: 20 }}>
        <Text type="secondary">
          您可以继续与AI客服交流，人工客服接入后会通知您
        </Text>
      </Paragraph>
      
      <Button onClick={handleCancel} icon={<CloseOutlined />}>
        取消请求
      </Button>
    </div>
  );

  // 渲染接入成功界面
  const renderConnected = () => (
    <div style={{ textAlign: 'center', padding: '20px' }}>
      <Result
        status="success"
        title="人工客服已接入"
        subTitle={`客服${staffName}正在为您服务`}
        extra={[
          <Button key="close" onClick={onComplete}>
            开始对话
          </Button>
        ]}
      />
    </div>
  );

  // 渲染错误界面
  const renderError = () => (
    <div style={{ textAlign: 'center', padding: '20px' }}>
      <Result
        status="error"
        title="接入失败"
        subTitle={error || '暂时无法接入人工客服，请稍后再试'}
        extra={[
          <Button key="retry" type="primary" onClick={requestHumanService}>
            重试
          </Button>,
          <Button key="cancel" onClick={onCancel}>
            取消
          </Button>
        ]}
      />
    </div>
  );

  // 根据状态渲染不同界面
  const renderContent = () => {
    switch (status) {
      case TransferStatus.IN_PROGRESS:
        return renderConnected();
      case TransferStatus.ERROR:
        return renderError();
      case TransferStatus.WAITING:
      default:
        return renderWaiting();
    }
  };

  return (
    <Modal
      title={
        <div>
          <CustomerServiceOutlined /> 人工客服
        </div>
      }
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={400}
    >
      {renderContent()}
    </Modal>
  );
};

export default HumanServiceTransfer; 