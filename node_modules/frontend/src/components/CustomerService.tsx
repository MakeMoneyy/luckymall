import React, { useState, useEffect, useRef } from 'react';
import { Button, Input, Spin, Avatar, Badge, Drawer, message } from 'antd';
import { SendOutlined, CustomerServiceOutlined, CloseOutlined } from '@ant-design/icons';
import { v4 as uuidv4 } from 'uuid';
import '../styles/CustomerService.css';
import { sendChatMessage, ChatResponse } from '../services/chatService';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

const CustomerService: React.FC = () => {
  const [visible, setVisible] = useState<boolean>(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [sessionId, setSessionId] = useState<string>('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // 初始化会话ID
  useEffect(() => {
    const storedSessionId = localStorage.getItem('chatSessionId');
    if (storedSessionId) {
      setSessionId(storedSessionId);
    } else {
      const newSessionId = uuidv4();
      setSessionId(newSessionId);
      localStorage.setItem('chatSessionId', newSessionId);
    }
  }, []);

  // 自动滚动到最新消息
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // 显示客服窗口
  const showDrawer = () => {
    setVisible(true);
    // 如果是首次打开，显示欢迎消息
    if (messages.length === 0) {
      setMessages([
        {
          id: uuidv4(),
          content: '您好！我是招财商城的智能客服助手，有什么可以帮您的吗？',
          sender: 'bot',
          timestamp: new Date()
        }
      ]);
    }
  };

  // 关闭客服窗口
  const closeDrawer = () => {
    setVisible(false);
  };

  // 发送消息
  const handleSend = async () => {
    if (!inputValue.trim()) return;

    // 添加用户消息到列表
    const userMessage: Message = {
      id: uuidv4(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setLoading(true);

    try {
      // 调用后端API
      const response = await sendChatMessage({
        userId: 'web-user',
        sessionId: sessionId,
        message: inputValue,
        context: {}
      });

      // 添加机器人回复
      const botMessage: Message = {
        id: uuidv4(),
        content: response.result || '抱歉，我暂时无法回答您的问题。',
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
      message.error('发送消息失败，请稍后再试');
      
      // 添加错误提示
      const errorMessage: Message = {
        id: uuidv4(),
        content: '抱歉，系统暂时无法回应，请稍后再试。',
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  // 处理按键事件
  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSend();
    }
  };

  return (
    <>
      {/* 悬浮按钮 */}
      <Badge dot>
        <Button
          type="primary"
          shape="circle"
          icon={<CustomerServiceOutlined />}
          size="large"
          className="customer-service-button"
          onClick={showDrawer}
        />
      </Badge>

      {/* 聊天抽屉 */}
      <Drawer
        title="智能客服"
        placement="right"
        onClose={closeDrawer}
        open={visible}
        width={320}
        closeIcon={<CloseOutlined />}
        className="customer-service-drawer"
        footer={
          <div className="customer-service-footer">
            <Input
              value={inputValue}
              onChange={e => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="请输入您的问题..."
              disabled={loading}
              className="customer-service-input"
            />
            <Button
              type="primary"
              icon={<SendOutlined />}
              onClick={handleSend}
              disabled={loading || !inputValue.trim()}
              className="customer-service-send-button"
            />
          </div>
        }
      >
        <div className="customer-service-messages">
          {messages.map(msg => (
            <div
              key={msg.id}
              className={`message-bubble ${msg.sender === 'user' ? 'user-message' : 'bot-message'}`}
            >
              {msg.sender === 'bot' && (
                <Avatar className="bot-avatar" icon={<CustomerServiceOutlined />} />
              )}
              <div className="message-content">
                <div className="message-text">{msg.content}</div>
                <div className="message-time">
                  {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
              </div>
            </div>
          ))}
          {loading && (
            <div className="message-bubble bot-message">
              <Avatar className="bot-avatar" icon={<CustomerServiceOutlined />} />
              <div className="message-content loading-content">
                <Spin size="small" />
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
      </Drawer>
    </>
  );
};

export default CustomerService; 