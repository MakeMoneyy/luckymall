import React, { useState } from 'react';
import { 
  Card, 
  Button, 
  Typography, 
  Space, 
  Divider, 
  Input, 
  Select,
  Form,
  Alert,
  Spin,
  Table,
  Tag,
  InputNumber
} from 'antd';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import { CartService } from '../services/cartService';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;

// 模拟用户ID
const MOCK_USER_ID = 1;

interface ApiTestResult {
  status: 'success' | 'error';
  data: any;
  error?: string;
  time: number;
}

const ApiTestPage: React.FC = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState<boolean>(false);
  const [testResults, setTestResults] = useState<Record<string, ApiTestResult>>({});
  
  // 测试后端连接
  const testBackendConnection = async () => {
    setLoading(true);
    const startTime = Date.now();
    
    try {
      const response = await api.get('/api/health', { timeout: 5000 });
      setTestResults(prev => ({
        ...prev,
        connection: {
          status: 'success',
          data: response.data,
          time: Date.now() - startTime
        }
      }));
    } catch (error: any) {
      setTestResults(prev => ({
        ...prev,
        connection: {
          status: 'error',
          data: null,
          error: error.message,
          time: Date.now() - startTime
        }
      }));
    } finally {
      setLoading(false);
    }
  };
  
  // 测试获取购物车
  const testGetCart = async () => {
    setLoading(true);
    const startTime = Date.now();
    
    try {
      const cartItems = await CartService.getCartItems(MOCK_USER_ID);
      setTestResults(prev => ({
        ...prev,
        getCart: {
          status: 'success',
          data: cartItems,
          time: Date.now() - startTime
        }
      }));
    } catch (error: any) {
      setTestResults(prev => ({
        ...prev,
        getCart: {
          status: 'error',
          data: null,
          error: error.message,
          time: Date.now() - startTime
        }
      }));
    } finally {
      setLoading(false);
    }
  };
  
  // 测试添加到购物车
  const testAddToCart = async () => {
    setLoading(true);
    const startTime = Date.now();
    
    try {
      // 使用商品ID 1作为测试
      const result = await CartService.addToCart(MOCK_USER_ID, 1, 1);
      setTestResults(prev => ({
        ...prev,
        addToCart: {
          status: 'success',
          data: result,
          time: Date.now() - startTime
        }
      }));
    } catch (error: any) {
      setTestResults(prev => ({
        ...prev,
        addToCart: {
          status: 'error',
          data: null,
          error: error.message,
          time: Date.now() - startTime
        }
      }));
    } finally {
      setLoading(false);
    }
  };
  
  // 测试清空购物车
  const testClearCart = async () => {
    setLoading(true);
    const startTime = Date.now();
    
    try {
      const result = await CartService.clearCart(MOCK_USER_ID);
      setTestResults(prev => ({
        ...prev,
        clearCart: {
          status: 'success',
          data: result,
          time: Date.now() - startTime
        }
      }));
    } catch (error: any) {
      setTestResults(prev => ({
        ...prev,
        clearCart: {
          status: 'error',
          data: null,
          error: error.message,
          time: Date.now() - startTime
        }
      }));
    } finally {
      setLoading(false);
    }
  };
  
  // 渲染测试结果
  const renderTestResult = (key: string, result?: ApiTestResult) => {
    if (!result) return null;
    
    return (
      <Card 
        title={`${key} 测试结果`}
        type="inner"
        style={{ marginBottom: 16 }}
        extra={<Tag color={result.status === 'success' ? 'green' : 'red'}>
          {result.status === 'success' ? '成功' : '失败'}
        </Tag>}
      >
        <Space direction="vertical" style={{ width: '100%' }}>
          <Text>响应时间: {result.time}ms</Text>
          
          {result.status === 'error' ? (
            <Alert message={result.error} type="error" showIcon />
          ) : (
            <div>
              <Text>响应数据:</Text>
              <pre style={{ 
                background: '#f5f5f5', 
                padding: 10, 
                borderRadius: 4,
                maxHeight: 200,
                overflow: 'auto'
              }}>
                {JSON.stringify(result.data, null, 2)}
              </pre>
            </div>
          )}
        </Space>
      </Card>
    );
  };
  
  return (
    <div style={{ padding: '20px' }}>
      <Card title="API 测试工具" extra={<Button onClick={() => navigate('/')}>返回首页</Button>}>
        <Paragraph>
          此页面用于测试前端与后端API的连接情况。点击下方按钮测试不同的API端点。
        </Paragraph>
        
        <Space wrap style={{ marginBottom: 20 }}>
          <Button 
            type="primary" 
            onClick={testBackendConnection}
            loading={loading}
          >
            测试后端连接
          </Button>
          
          <Button 
            onClick={testGetCart}
            loading={loading}
          >
            测试获取购物车
          </Button>
          
          <Button 
            onClick={testAddToCart}
            loading={loading}
          >
            测试添加到购物车
          </Button>
          
          <Button 
            danger
            onClick={testClearCart}
            loading={loading}
          >
            测试清空购物车
          </Button>
        </Space>
        
        <Divider />
        
        {loading && (
          <div style={{ textAlign: 'center', padding: '20px 0' }}>
            <Spin tip="测试中..." />
          </div>
        )}
        
        {Object.entries(testResults).map(([key, result]) => (
          renderTestResult(key, result)
        ))}
        
        {Object.keys(testResults).length > 0 && (
          <Card title="诊断" style={{ marginTop: 20 }}>
            {testResults.connection?.status === 'error' && (
              <Alert 
                message="后端连接失败" 
                description={
                  <div>
                    <p>可能的原因:</p>
                    <ul>
                      <li>后端服务未启动</li>
                      <li>网络连接问题</li>
                      <li>CORS配置问题</li>
                      <li>端口配置错误</li>
                    </ul>
                    <p>建议解决方案:</p>
                    <ol>
                      <li>确保后端服务已启动，可以通过运行 <code>start_project.bat</code> 或 <code>cd backend && mvn spring-boot:run</code> 来启动</li>
                      <li>检查后端是否监听在正确的端口（默认8080）</li>
                      <li>检查后端日志，查看是否有启动错误</li>
                      <li>确保前端代理配置正确</li>
                    </ol>
                  </div>
                }
                type="error"
                showIcon
              />
            )}
            
            {testResults.connection?.status === 'success' && testResults.getCart?.status === 'error' && (
              <Alert 
                message="购物车API调用失败" 
                description={
                  <div>
                    <p>可能的原因:</p>
                    <ul>
                      <li>购物车API路径配置错误</li>
                      <li>后端购物车服务未实现</li>
                      <li>数据库连接问题</li>
                    </ul>
                    <p>建议解决方案:</p>
                    <ol>
                      <li>检查前端CartService中的API路径是否与后端匹配</li>
                      <li>检查后端日志，查看具体错误信息</li>
                      <li>确保数据库已正确配置并启动</li>
                    </ol>
                  </div>
                }
                type="warning"
                showIcon
              />
            )}
            
            {testResults.connection?.status === 'success' && 
             testResults.getCart?.status === 'success' && 
             testResults.addToCart?.status === 'error' && (
              <Alert 
                message="添加购物车失败" 
                description={
                  <div>
                    <p>可能的原因:</p>
                    <ul>
                      <li>添加购物车API路径配置错误</li>
                      <li>请求参数格式错误</li>
                      <li>商品ID不存在</li>
                    </ul>
                    <p>建议解决方案:</p>
                    <ol>
                      <li>检查前端CartService中的API路径是否与后端匹配</li>
                      <li>检查请求参数格式是否正确</li>
                      <li>确保测试商品ID存在</li>
                    </ol>
                  </div>
                }
                type="warning"
                showIcon
              />
            )}
            
            {testResults.connection?.status === 'success' && 
             testResults.getCart?.status === 'success' && 
             testResults.addToCart?.status === 'success' && (
              <Alert 
                message="API测试通过" 
                description="所有API测试都成功通过，前后端连接正常。"
                type="success"
                showIcon
              />
            )}
          </Card>
        )}
      </Card>
    </div>
  );
};

export default ApiTestPage; 