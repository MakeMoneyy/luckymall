import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Table, 
  Tabs, 
  Button, 
  Space, 
  Typography, 
  Tag, 
  Modal, 
  Descriptions,
  List,
  Image,
  Empty,
  Steps,
  Badge,
  Row,
  Col,
  Divider
} from 'antd';
import { 
  EyeOutlined, 
  FileTextOutlined, 
  ShoppingCartOutlined,
  CarOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  WalletOutlined
} from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import { CartItem, Order } from '../types';

const { Title, Text } = Typography;
const { TabPane } = Tabs;
const { Step } = Steps;

// 模拟订单数据
const mockOrders: Order[] = [
  {
    id: 'ORD001',
    userId: 1,
    items: [
      {
        product: {
          id: 1,
          name: 'iPhone 15 Pro',
          description: 'Apple iPhone 15 Pro 256GB',
          price: 8999,
          stockQuantity: 50,
          categoryId: 6,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 128,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '手机通讯'
        },
        quantity: 1
      }
    ],
    totalAmount: 8999,
    status: 'PENDING_PAYMENT',
    createdAt: '2024-01-15T10:30:00Z',
    addressId: 1,
    paymentMethod: 'credit_card'
  },
  {
    id: 'ORD002',
    userId: 1,
    items: [
      {
        product: {
          id: 2,
          name: '华为 Mate 60 Pro',
          description: '华为 Mate 60 Pro 512GB',
          price: 6999,
          stockQuantity: 30,
          categoryId: 6,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 89,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '手机通讯'
        },
        quantity: 2
      }
    ],
    totalAmount: 13998,
    status: 'SHIPPED',
    createdAt: '2024-01-10T14:20:00Z',
    addressId: 1,
    paymentMethod: 'bank_transfer'
  },
  {
    id: 'ORD003',
    userId: 1,
    items: [
      {
        product: {
          id: 3,
          name: 'MacBook Pro',
          description: 'Apple MacBook Pro 14英寸',
          price: 15999,
          stockQuantity: 20,
          categoryId: 7,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 45,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '电脑办公'
        },
        quantity: 1
      }
    ],
    totalAmount: 15999,
    status: 'COMPLETED',
    createdAt: '2024-01-05T09:15:00Z',
    addressId: 2,
    paymentMethod: 'credit_card'
  },
  {
    id: 'ORD004',
    userId: 1,
    items: [
      {
        product: {
          id: 4,
          name: '索尼 WH-1000XM5',
          description: '索尼 WH-1000XM5 无线降噪耳机',
          price: 2999,
          stockQuantity: 100,
          categoryId: 8,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 67,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '数码配件'
        },
        quantity: 1
      }
    ],
    totalAmount: 2999,
    status: 'CANCELLED',
    createdAt: '2024-01-02T16:45:00Z',
    addressId: 1,
    paymentMethod: 'balance'
  }
];

const OrderHistoryPage: React.FC = () => {
  const navigate = useNavigate();
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [detailModalVisible, setDetailModalVisible] = useState(false);
  
  // 根据状态筛选订单
  const getOrdersByStatus = (status?: string) => {
    if (!status || status === 'all') {
      return mockOrders;
    }
    return mockOrders.filter(order => order.status === status);
  };
  
  // 订单状态映射
  const getStatusTag = (status: string) => {
    const statusMap: Record<string, { color: string; text: string }> = {
      PENDING_PAYMENT: { color: 'orange', text: '待付款' },
      PAID: { color: 'blue', text: '已付款' },
      PROCESSING: { color: 'purple', text: '处理中' },
      SHIPPED: { color: 'cyan', text: '已发货' },
      COMPLETED: { color: 'green', text: '已完成' },
      CANCELLED: { color: 'red', text: '已取消' }
    };
    
    const config = statusMap[status] || { color: 'default', text: '未知' };
    return <Tag color={config.color}>{config.text}</Tag>;
  };
  
  // 获取订单当前步骤
  const getOrderStep = (status: string) => {
    const stepMap: Record<string, number> = {
      PENDING_PAYMENT: 0,
      PAID: 1,
      PROCESSING: 1,
      SHIPPED: 2,
      COMPLETED: 3,
      CANCELLED: -1
    };
    
    return stepMap[status] !== undefined ? stepMap[status] : 0;
  };
  
  // 显示订单详情
  const showOrderDetail = (order: Order) => {
    setSelectedOrder(order);
    setDetailModalVisible(true);
  };
  
  // 处理订单操作
  const handleOrderAction = (order: Order, action: string) => {
    if (action === 'pay') {
      // 跳转到支付页面
      navigate('/payment', { state: { orderId: order.id, amount: order.totalAmount } });
    } else if (action === 'cancel') {
      Modal.confirm({
        title: '确认取消订单',
        content: `您确定要取消订单 ${order.id} 吗？`,
        onOk() {
          console.log('取消订单:', order.id);
          // 这里应该调用API取消订单
        }
      });
    } else if (action === 'confirm') {
      Modal.confirm({
        title: '确认收货',
        content: `您确定已收到订单 ${order.id} 的商品吗？`,
        onOk() {
          console.log('确认收货:', order.id);
          // 这里应该调用API确认收货
        }
      });
    }
  };
  
  // 渲染订单操作按钮
  const renderOrderActions = (order: Order) => {
    switch (order.status) {
      case 'PENDING_PAYMENT':
        return (
          <Space>
            <Button type="primary" size="small" onClick={() => handleOrderAction(order, 'pay')}>
              立即付款
            </Button>
            <Button size="small" onClick={() => handleOrderAction(order, 'cancel')}>
              取消订单
            </Button>
          </Space>
        );
      case 'SHIPPED':
        return (
          <Button type="primary" size="small" onClick={() => handleOrderAction(order, 'confirm')}>
            确认收货
          </Button>
        );
      case 'COMPLETED':
        return (
          <Button size="small" onClick={() => navigate(`/review?orderId=${order.id}`)}>
            评价商品
          </Button>
        );
      default:
        return null;
    }
  };
  
  // 表格列定义
  const columns = [
    {
      title: '订单信息',
      key: 'info',
      render: (order: Order) => (
        <div style={{ display: 'flex' }}>
          <div style={{ marginRight: 16, minWidth: 80 }}>
            {order.items.slice(0, 1).map((item, index) => (
              <Image
                key={index}
                width={80}
                height={80}
                src={item.product.imageUrl || 'https://via.placeholder.com/80x80?text=暂无图片'}
                alt={item.product.name}
                style={{ objectFit: 'cover' }}
              />
            ))}
            {order.items.length > 1 && (
              <div style={{ textAlign: 'center', marginTop: 4 }}>
                <Text type="secondary">共{order.items.length}件</Text>
              </div>
            )}
          </div>
          <div>
            {order.items.slice(0, 2).map((item, index) => (
              <div key={index} style={{ marginBottom: 8 }}>
                <Text ellipsis style={{ maxWidth: 300, display: 'block' }}>
                  {item.product.name}
                </Text>
                <div>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    {item.product.categoryName} | 数量: {item.quantity}
                  </Text>
                </div>
              </div>
            ))}
            {order.items.length > 2 && (
              <Text type="secondary">等 {order.items.length} 件商品</Text>
            )}
          </div>
        </div>
      ),
    },
    {
      title: '订单金额',
      dataIndex: 'totalAmount',
      key: 'totalAmount',
      width: 120,
      render: (amount: number) => (
        <Text strong style={{ color: '#ff4d4f' }}>
          ¥{amount.toFixed(2)}
        </Text>
      ),
    },
    {
      title: '订单状态',
      dataIndex: 'status',
      key: 'status',
      width: 100,
      render: (status: string) => getStatusTag(status),
    },
    {
      title: '下单时间',
      dataIndex: 'createdAt',
      key: 'createdAt',
      width: 160,
      render: (date: string) => new Date(date).toLocaleString('zh-CN'),
    },
    {
      title: '操作',
      key: 'action',
      width: 180,
      render: (record: Order) => (
        <Space>
          {renderOrderActions(record)}
          <Button
            type="link"
            size="small"
            icon={<EyeOutlined />}
            onClick={() => showOrderDetail(record)}
          >
            查看详情
          </Button>
        </Space>
      ),
    },
  ];
  
  return (
    <div style={{ padding: '20px' }}>
      <Title level={2}>我的订单</Title>
      
      <Card bodyStyle={{ padding: 0 }}>
        <Tabs defaultActiveKey="all" size="large" style={{ padding: '0 16px' }}>
          <TabPane tab="全部订单" key="all">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('all')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab={
            <Badge count={getOrdersByStatus('PENDING_PAYMENT').length} offset={[10, 0]}>
              待付款
            </Badge>
          } key="PENDING_PAYMENT">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('PENDING_PAYMENT')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab="待发货" key="PAID">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('PAID')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab="待收货" key="SHIPPED">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('SHIPPED')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab="已完成" key="COMPLETED">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('COMPLETED')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
        </Tabs>
        
        {mockOrders.length === 0 && (
          <Empty
            image={<FileTextOutlined style={{ fontSize: 64, color: '#ccc' }} />}
            description="暂无订单"
            style={{ padding: '60px 0' }}
          />
        )}
      </Card>
      
      {/* 订单详情模态框 */}
      <Modal
        title="订单详情"
        open={detailModalVisible}
        onCancel={() => setDetailModalVisible(false)}
        footer={null}
        width={800}
      >
        {selectedOrder && (
          <div>
            {/* 订单状态进度条 */}
            <div style={{ margin: '20px 0 40px' }}>
              <Steps current={getOrderStep(selectedOrder.status)} status={selectedOrder.status === 'CANCELLED' ? 'error' : 'process'}>
                <Step title="提交订单" icon={<ShoppingCartOutlined />} />
                <Step title="商家发货" icon={<CarOutlined />} />
                <Step title="交易完成" icon={<CheckCircleOutlined />} />
              </Steps>
              {selectedOrder.status === 'CANCELLED' && (
                <div style={{ textAlign: 'center', marginTop: 16 }}>
                  <Text type="danger" strong>
                    <CloseCircleOutlined style={{ marginRight: 8 }} />
                    订单已取消
                  </Text>
                </div>
              )}
            </div>
            
            <Row gutter={24}>
              <Col span={16}>
                {/* 订单信息 */}
                <Card title="订单信息" style={{ marginBottom: 16 }}>
                  <Descriptions column={1} bordered size="small">
                    <Descriptions.Item label="订单编号">{selectedOrder.id}</Descriptions.Item>
                    <Descriptions.Item label="下单时间">
                      {new Date(selectedOrder.createdAt).toLocaleString('zh-CN')}
                    </Descriptions.Item>
                    <Descriptions.Item label="支付方式">
                      {selectedOrder.paymentMethod === 'credit_card' && (
                        <span><WalletOutlined style={{ marginRight: 8 }} />信用卡支付</span>
                      )}
                      {selectedOrder.paymentMethod === 'bank_transfer' && (
                        <span><WalletOutlined style={{ marginRight: 8 }} />银行转账</span>
                      )}
                      {selectedOrder.paymentMethod === 'balance' && (
                        <span><WalletOutlined style={{ marginRight: 8 }} />余额支付</span>
                      )}
                    </Descriptions.Item>
                  </Descriptions>
                </Card>
                
                {/* 商品清单 */}
                <Card title="商品清单" style={{ marginBottom: 16 }}>
                  <List
                    dataSource={selectedOrder.items}
                    renderItem={(item: CartItem) => (
                      <List.Item>
                        <List.Item.Meta
                          avatar={
                            <Image
                              width={60}
                              height={60}
                              src={item.product.imageUrl || 'https://via.placeholder.com/60x60?text=暂无图片'}
                              alt={item.product.name}
                              style={{ objectFit: 'cover' }}
                            />
                          }
                          title={item.product.name}
                          description={
                            <Space direction="vertical" size="small">
                              <Text type="secondary">{item.product.categoryName}</Text>
                              <Text>数量: {item.quantity}</Text>
                            </Space>
                          }
                        />
                        <div>
                          <Text strong style={{ color: '#ff4d4f' }}>
                            ¥{item.product.price}
                          </Text>
                        </div>
                      </List.Item>
                    )}
                  />
                </Card>
              </Col>
              
              <Col span={8}>
                {/* 金额信息 */}
                <Card title="金额信息">
                  <div style={{ padding: '0 16px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
                      <Text>商品总价:</Text>
                      <Text>¥{selectedOrder.totalAmount.toFixed(2)}</Text>
                    </div>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
                      <Text>运费:</Text>
                      <Text>¥0.00</Text>
                    </div>
                    <Divider style={{ margin: '12px 0' }} />
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
                      <Text strong>实付款:</Text>
                      <Text strong style={{ color: '#ff4d4f', fontSize: 16 }}>
                        ¥{selectedOrder.totalAmount.toFixed(2)}
                      </Text>
                    </div>
                  </div>
                </Card>
                
                {/* 订单操作 */}
                {renderOrderActions(selectedOrder) && (
                  <Card title="订单操作" style={{ marginTop: 16 }}>
                    <div style={{ textAlign: 'center', padding: '16px 0' }}>
                      {renderOrderActions(selectedOrder)}
                    </div>
                  </Card>
                )}
              </Col>
            </Row>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default OrderHistoryPage; 