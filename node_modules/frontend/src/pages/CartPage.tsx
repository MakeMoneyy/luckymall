import React from 'react';
import { 
  Card, 
  Table, 
  InputNumber, 
  Button, 
  Space, 
  Typography, 
  Image, 
  Empty,
  Checkbox,
  Row,
  Col,
  Divider,
  message
} from 'antd';
import { DeleteOutlined, ShoppingOutlined } from '@ant-design/icons';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { RootState, AppDispatch } from '../store';
import { 
  updateQuantity, 
  removeFromCart, 
  clearCart 
} from '../store/slices/cartSlice';

const { Title, Text } = Typography;

const CartPage: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch<AppDispatch>();
  
  const { items, totalAmount } = useSelector(
    (state: RootState) => state.cart
  );
  
  // 本地状态管理选中的商品
  const [selectedItems, setSelectedItems] = React.useState<number[]>([]);
  
  // 处理数量变化
  const handleQuantityChange = (productId: number, quantity: number) => {
    if (quantity > 0) {
      dispatch(updateQuantity({ productId, quantity }));
    }
  };
  
  // 删除商品
  const handleRemoveItem = (productId: number) => {
    dispatch(removeFromCart(productId));
    message.success('商品已从购物车中移除');
  };
  
  // 清空购物车
  const handleClearCart = () => {
    dispatch(clearCart());
    message.success('购物车已清空');
  };
  
  // 切换商品选择状态
  const handleToggleSelection = (productId: number) => {
    setSelectedItems(prev => 
      prev.includes(productId) 
        ? prev.filter(id => id !== productId)
        : [...prev, productId]
    );
  };
  
  // 全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedItems(items.map(item => item.product.id));
    } else {
      setSelectedItems([]);
    }
  };
  
  // 结算
  const handleCheckout = () => {
    const selectedCartItems = items.filter(item => 
      selectedItems.includes(item.product.id)
    );
    
    if (selectedCartItems.length === 0) {
      message.warning('请选择要结算的商品');
      return;
    }
    
    // 这里暂时只是模拟跳转到订单页面
    console.log('结算商品:', selectedCartItems);
    message.success('跳转到订单页面（模拟）');
    // navigate('/checkout');
  };
  
  // 计算选中商品的总价
  const calculateSelectedTotal = () => {
    return items
      .filter(item => selectedItems.includes(item.product.id))
      .reduce((total, item) => total + item.product.price * item.quantity, 0);
  };
  
  // 表格列定义
  const columns = [
    {
      title: (
        <Checkbox
          checked={selectedItems.length === items.length && items.length > 0}
          indeterminate={selectedItems.length > 0 && selectedItems.length < items.length}
          onChange={(e) => handleSelectAll(e.target.checked)}
        >
          全选
        </Checkbox>
      ),
      dataIndex: 'selection',
      key: 'selection',
      width: 80,
      render: (_: any, record: any) => (
        <Checkbox
          checked={selectedItems.includes(record.product.id)}
          onChange={() => handleToggleSelection(record.product.id)}
        />
      ),
    },
    {
      title: '商品信息',
      dataIndex: 'product',
      key: 'product',
      width: 300,
      render: (product: any) => (
        <Space>
          <Image
            width={60}
            height={60}
            src={product.imageUrl || 'https://via.placeholder.com/60x60?text=暂无图片'}
            alt={product.name}
            style={{ objectFit: 'cover' }}
          />
          <div>
            <div style={{ fontWeight: 500, marginBottom: 4 }}>
              {product.name}
            </div>
            <Text type="secondary" style={{ fontSize: 12 }}>
              {product.categoryName}
            </Text>
          </div>
        </Space>
      ),
    },
    {
      title: '单价',
      dataIndex: 'product',
      key: 'price',
      width: 120,
      render: (product: any) => (
        <Text strong style={{ color: '#ff4d4f' }}>
          ¥{product.price}
        </Text>
      ),
    },
    {
      title: '数量',
      dataIndex: 'quantity',
      key: 'quantity',
      width: 120,
      render: (quantity: number, record: any) => (
        <InputNumber
          min={1}
          max={record.product.stockQuantity}
          value={quantity}
          onChange={(value) => handleQuantityChange(record.product.id, value || 1)}
          style={{ width: 80 }}
        />
      ),
    },
    {
      title: '小计',
      key: 'subtotal',
      width: 120,
      render: (_: any, record: any) => (
        <Text strong style={{ color: '#ff4d4f' }}>
          ¥{(record.product.price * record.quantity).toFixed(2)}
        </Text>
      ),
    },
    {
      title: '操作',
      key: 'action',
      width: 100,
      render: (_: any, record: any) => (
        <Button
          type="link"
          danger
          icon={<DeleteOutlined />}
          onClick={() => handleRemoveItem(record.product.id)}
        >
          删除
        </Button>
      ),
    },
  ];
  
  if (items.length === 0) {
    return (
      <div style={{ padding: '20px' }}>
        <Title level={2}>购物车</Title>
        <Empty
          image={<ShoppingOutlined style={{ fontSize: 64, color: '#ccc' }} />}
          description="购物车是空的"
          style={{ padding: '60px 0' }}
        >
          <Button type="primary" onClick={() => navigate('/')}>
            去购物
          </Button>
        </Empty>
      </div>
    );
  }
  
  return (
    <div style={{ padding: '20px' }}>
      <Title level={2}>购物车</Title>
      
      <Card style={{ marginBottom: 20 }}>
        <Table
          columns={columns}
          dataSource={items}
          rowKey={(record) => record.product.id}
          pagination={false}
          size="middle"
        />
      </Card>
      
      <Row gutter={20}>
        <Col xs={24} md={16}>
          <Space>
            <Button onClick={handleClearCart} disabled={items.length === 0}>
              清空购物车
            </Button>
            <Button onClick={() => navigate('/')}>
              继续购物
            </Button>
          </Space>
        </Col>
        
        <Col xs={24} md={8}>
          <Card title="结算信息">
            <Space direction="vertical" style={{ width: '100%' }}>
              <Row justify="space-between">
                <Text>已选商品：</Text>
                <Text>{selectedItems.length} 件</Text>
              </Row>
              
              <Row justify="space-between">
                <Text>商品总价：</Text>
                <Text strong style={{ color: '#ff4d4f' }}>
                  ¥{calculateSelectedTotal().toFixed(2)}
                </Text>
              </Row>
              
              <Divider style={{ margin: '12px 0' }} />
              
              <Row justify="space-between">
                <Text strong>应付总额：</Text>
                <Text strong style={{ color: '#ff4d4f', fontSize: 18 }}>
                  ¥{calculateSelectedTotal().toFixed(2)}
                </Text>
              </Row>
              
              <Button 
                type="primary" 
                size="large" 
                block
                onClick={handleCheckout}
                disabled={selectedItems.length === 0}
              >
                结算 ({selectedItems.length})
              </Button>
            </Space>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default CartPage; 