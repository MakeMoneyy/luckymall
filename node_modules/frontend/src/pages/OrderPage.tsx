import React, { useState } from 'react';
import { 
  Card, 
  Table, 
  Tabs, 
  Button, 
  Space, 
  Typography, 
  Tag, 
  Modal,
  Descriptions,
  List,
  Image,
  Empty
} from 'antd';
import { EyeOutlined, FileTextOutlined } from '@ant-design/icons';
import { Order, CartItem } from '../types';

const { Title, Text } = Typography;
const { TabPane } = Tabs;

// 模拟订单数据
const mockOrders: Order[] = [
  {
    id: 'ORD001',
    userId: 1,
    items: [
      {
        product: {
          id: 1,
          name: 'iPhone 15 Pro',
          description: 'Apple iPhone 15 Pro 256GB',
          price: 8999,
          stockQuantity: 50,
          categoryId: 6,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 128,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '手机通讯'
        },
        quantity: 1
      }
    ],
    totalAmount: 8999,
    status: 'pending',
    createdAt: '2024-01-15T10:30:00Z'
  },
  {
    id: 'ORD002',
    userId: 1,
    items: [
      {
        product: {
          id: 2,
          name: '华为 Mate 60 Pro',
          description: '华为 Mate 60 Pro 512GB',
          price: 6999,
          stockQuantity: 30,
          categoryId: 6,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 89,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '手机通讯'
        },
        quantity: 2
      }
    ],
    totalAmount: 13998,
    status: 'shipped',
    createdAt: '2024-01-10T14:20:00Z'
  },
  {
    id: 'ORD003',
    userId: 1,
    items: [
      {
        product: {
          id: 3,
          name: 'MacBook Pro',
          description: 'Apple MacBook Pro 14英寸',
          price: 15999,
          stockQuantity: 20,
          categoryId: 7,
          imageUrl: 'https://via.placeholder.com/400x400',
          salesCount: 45,
          status: 1,
          createdAt: '2024-01-01',
          updatedAt: '2024-01-01',
          categoryName: '电脑办公'
        },
        quantity: 1
      }
    ],
    totalAmount: 15999,
    status: 'completed',
    createdAt: '2024-01-05T09:15:00Z'
  }
];

const OrderPage: React.FC = () => {
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [detailModalVisible, setDetailModalVisible] = useState(false);
  
  // 根据状态筛选订单
  const getOrdersByStatus = (status?: string) => {
    if (!status || status === 'all') {
      return mockOrders;
    }
    return mockOrders.filter(order => order.status === status);
  };
  
  // 订单状态映射
  const getStatusTag = (status: string) => {
    const statusMap: Record<string, { color: string; text: string }> = {
      pending: { color: 'orange', text: '待付款' },
      paid: { color: 'blue', text: '已付款' },
      shipped: { color: 'cyan', text: '已发货' },
      completed: { color: 'green', text: '已完成' },
      cancelled: { color: 'red', text: '已取消' }
    };
    
    const config = statusMap[status] || { color: 'default', text: '未知' };
    return <Tag color={config.color}>{config.text}</Tag>;
  };
  
  // 显示订单详情
  const showOrderDetail = (order: Order) => {
    setSelectedOrder(order);
    setDetailModalVisible(true);
  };
  
  // 表格列定义
  const columns = [
    {
      title: '订单号',
      dataIndex: 'id',
      key: 'id',
      width: 120,
    },
    {
      title: '商品信息',
      dataIndex: 'items',
      key: 'items',
      render: (items: CartItem[]) => (
        <div>
          {items.slice(0, 2).map((item, index) => (
            <div key={index} style={{ marginBottom: 4 }}>
              <Text ellipsis style={{ maxWidth: 200 }}>
                {item.product.name} × {item.quantity}
              </Text>
            </div>
          ))}
          {items.length > 2 && (
            <Text type="secondary">等 {items.length} 件商品</Text>
          )}
        </div>
      ),
    },
    {
      title: '订单金额',
      dataIndex: 'totalAmount',
      key: 'totalAmount',
      width: 120,
      render: (amount: number) => (
        <Text strong style={{ color: '#ff4d4f' }}>
          ¥{amount.toFixed(2)}
        </Text>
      ),
    },
    {
      title: '订单状态',
      dataIndex: 'status',
      key: 'status',
      width: 100,
      render: (status: string) => getStatusTag(status),
    },
    {
      title: '下单时间',
      dataIndex: 'createdAt',
      key: 'createdAt',
      width: 160,
      render: (date: string) => new Date(date).toLocaleString('zh-CN'),
    },
    {
      title: '操作',
      key: 'action',
      width: 120,
      render: (_: any, record: Order) => (
        <Space>
          <Button
            type="link"
            size="small"
            icon={<EyeOutlined />}
            onClick={() => showOrderDetail(record)}
          >
            查看
          </Button>
        </Space>
      ),
    },
  ];
  
  return (
    <div style={{ padding: '20px' }}>
      <Title level={2}>我的订单</Title>
      
      <Card>
        <Tabs defaultActiveKey="all">
          <TabPane tab="全部订单" key="all">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('all')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab="待付款" key="pending">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('pending')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab="已发货" key="shipped">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('shipped')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
          <TabPane tab="已完成" key="completed">
            <Table
              columns={columns}
              dataSource={getOrdersByStatus('completed')}
              rowKey="id"
              pagination={{ pageSize: 10 }}
            />
          </TabPane>
        </Tabs>
        
        {mockOrders.length === 0 && (
          <Empty
            image={<FileTextOutlined style={{ fontSize: 64, color: '#ccc' }} />}
            description="暂无订单"
            style={{ padding: '60px 0' }}
          />
        )}
      </Card>
      
      {/* 订单详情模态框 */}
      <Modal
        title="订单详情"
        open={detailModalVisible}
        onCancel={() => setDetailModalVisible(false)}
        footer={null}
        width={800}
      >
        {selectedOrder && (
          <div>
            <Descriptions title="订单信息" bordered>
              <Descriptions.Item label="订单号">{selectedOrder.id}</Descriptions.Item>
              <Descriptions.Item label="订单状态">
                {getStatusTag(selectedOrder.status)}
              </Descriptions.Item>
              <Descriptions.Item label="下单时间">
                {new Date(selectedOrder.createdAt).toLocaleString('zh-CN')}
              </Descriptions.Item>
              <Descriptions.Item label="订单金额" span={3}>
                <Text strong style={{ color: '#ff4d4f', fontSize: 18 }}>
                  ¥{selectedOrder.totalAmount.toFixed(2)}
                </Text>
              </Descriptions.Item>
            </Descriptions>
            
            <div style={{ marginTop: 24 }}>
              <Title level={4}>商品清单</Title>
              <List
                dataSource={selectedOrder.items}
                renderItem={(item: CartItem) => (
                  <List.Item>
                    <List.Item.Meta
                      avatar={
                        <Image
                          width={60}
                          height={60}
                          src={item.product.imageUrl || 'https://via.placeholder.com/60x60?text=暂无图片'}
                          alt={item.product.name}
                          style={{ objectFit: 'cover' }}
                        />
                      }
                      title={item.product.name}
                      description={
                        <Space direction="vertical" size="small">
                          <Text type="secondary">{item.product.categoryName}</Text>
                          <Text>数量: {item.quantity}</Text>
                          <Text strong style={{ color: '#ff4d4f' }}>
                            单价: ¥{item.product.price} | 小计: ¥{(item.product.price * item.quantity).toFixed(2)}
                          </Text>
                        </Space>
                      }
                    />
                  </List.Item>
                )}
              />
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default OrderPage; 