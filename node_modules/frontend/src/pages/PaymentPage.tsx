import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Typography, 
  Radio, 
  Space, 
  Button, 
  Steps,
  message,
  Result,
  Spin
} from 'antd';
import { 
  CreditCardOutlined, 
  BankOutlined, 
  WalletOutlined,
  CheckCircleOutlined
} from '@ant-design/icons';
import { useLocation, useNavigate } from 'react-router-dom';
import { PaymentService, PaymentRequest } from '../services/paymentService';
import { OrderService } from '../services/orderService';

const { Title, Text } = Typography;
const { Step } = Steps;

interface PaymentPageState {
  orderId: string;
  amount: number;
}

// 模拟用户ID
const MOCK_USER_ID = 1;

const PaymentPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  
  // 从路由状态中获取数据
  const state = location.state as PaymentPageState;
  
  // 如果没有传递状态，重定向到首页
  useEffect(() => {
    if (!state || !state.orderId) {
      navigate('/');
      message.error('支付信息不完整');
    }
  }, [state, navigate]);
  
  // 支付状态
  const [paymentMethod, setPaymentMethod] = useState<string>('credit_card');
  const [paymentStep, setPaymentStep] = useState<number>(0);
  const [processing, setProcessing] = useState<boolean>(false);
  const [selectedCardId, setSelectedCardId] = useState<number | undefined>(undefined);
  const [selectedInstallmentPlanId, setSelectedInstallmentPlanId] = useState<number | undefined>(undefined);
  
  // 处理支付方式选择
  const handlePaymentMethodChange = (e: any) => {
    setPaymentMethod(e.target.value);
  };
  
  // 处理支付提交
  const handlePaymentSubmit = async () => {
    if (!state) return;
    
    try {
      setProcessing(true);
      
      // 构建支付请求
      const paymentRequest: PaymentRequest = {
        orderId: parseInt(state.orderId),
        paymentMethod,
        amount: state.amount,
        creditCardId: selectedCardId,
        installmentPlanId: selectedInstallmentPlanId
      };
      
      // 调用支付API
      // 实际项目中应该调用PaymentService.payOrder
      // const response = await PaymentService.payOrder(MOCK_USER_ID, paymentRequest);
      
      // 模拟支付处理
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // 调用订单支付API
      // await OrderService.payOrder(parseInt(state.orderId), MOCK_USER_ID);
      
      // 更新支付状态
      setPaymentStep(1);
      message.success('支付成功！');
    } catch (error) {
      console.error('支付失败:', error);
      message.error('支付失败，请稍后重试');
    } finally {
      setProcessing(false);
    }
  };
  
  // 处理返回订单列表
  const handleBackToOrders = () => {
    navigate('/orders');
  };
  
  // 处理继续购物
  const handleContinueShopping = () => {
    navigate('/');
  };
  
  // 渲染支付方式
  const renderPaymentMethods = () => {
    return (
      <div>
        <Title level={4}>支付方式</Title>
        <Radio.Group value={paymentMethod} onChange={handlePaymentMethodChange}>
          <Space direction="vertical" style={{ width: '100%' }}>
            <Radio value="credit_card">
              <Space>
                <CreditCardOutlined />
                信用卡支付
              </Space>
            </Radio>
            <Radio value="bank_transfer">
              <Space>
                <BankOutlined />
                银行转账
              </Space>
            </Radio>
            <Radio value="balance">
              <Space>
                <WalletOutlined />
                余额支付
              </Space>
            </Radio>
          </Space>
        </Radio.Group>
      </div>
    );
  };
  
  if (!state) {
    return null;
  }
  
  return (
    <div style={{ padding: '20px', maxWidth: 800, margin: '0 auto' }}>
      <Card>
        <Steps current={paymentStep} style={{ marginBottom: 40 }}>
          <Step title="选择支付方式" />
          <Step title="支付完成" />
        </Steps>
        
        {paymentStep === 0 && (
          <div>
            <div style={{ marginBottom: 24 }}>
              <Title level={4}>订单信息</Title>
              <div style={{ background: '#f5f5f5', padding: 16, borderRadius: 4 }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
                  <Text>订单编号:</Text>
                  <Text>{state.orderId}</Text>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Text>应付金额:</Text>
                  <Text strong style={{ color: '#ff4d4f', fontSize: 16 }}>
                    ¥{state.amount.toFixed(2)}
                  </Text>
                </div>
              </div>
            </div>
            
            {renderPaymentMethods()}
            
            <div style={{ marginTop: 24, textAlign: 'center' }}>
              <Button
                type="primary"
                size="large"
                onClick={handlePaymentSubmit}
                loading={processing}
              >
                确认支付
              </Button>
            </div>
          </div>
        )}
        
        {paymentStep === 1 && (
          <Result
            status="success"
            title="支付成功！"
            subTitle={`订单号: ${state.orderId} 已支付完成，感谢您的购买！`}
            extra={[
              <Button type="primary" key="orders" onClick={handleBackToOrders}>
                查看订单
              </Button>,
              <Button key="buy" onClick={handleContinueShopping}>继续购物</Button>,
            ]}
          />
        )}
      </Card>
    </div>
  );
};

export default PaymentPage; 