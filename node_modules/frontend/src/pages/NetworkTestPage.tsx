import React, { useState } from 'react';
import { Button, Card, Alert, Typography, Space, Spin } from 'antd';
import axios from 'axios';

const { Title, Text, Paragraph } = Typography;

const NetworkTestPage: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<{success: boolean; message: string; details?: any} | null>(null);

  const testDirectConnection = async () => {
    setLoading(true);
    setResult(null);
    
    try {
      const response = await axios.get('http://localhost:8080/api/products', {
        timeout: 5000
      });
      
      setResult({
        success: true,
        message: '成功连接到后端API!',
        details: {
          status: response.status,
          data: response.data
        }
      });
    } catch (error: any) {
      console.error('连接测试失败:', error);
      
      setResult({
        success: false,
        message: error.message || '未知错误',
        details: {
          hasResponse: !!error.response,
          hasRequest: !!error.request,
          config: error.config
        }
      });
    } finally {
      setLoading(false);
    }
  };
  
  const testProxyConnection = async () => {
    setLoading(true);
    setResult(null);
    
    try {
      const response = await axios.get('/api/products', {
        timeout: 5000
      });
      
      setResult({
        success: true,
        message: '通过代理成功连接到后端API!',
        details: {
          status: response.status,
          data: response.data
        }
      });
    } catch (error: any) {
      console.error('代理连接测试失败:', error);
      
      setResult({
        success: false,
        message: error.message || '未知错误',
        details: {
          hasResponse: !!error.response,
          hasRequest: !!error.request,
          config: error.config
        }
      });
    } finally {
      setLoading(false);
    }
  };
  
  const testPing = async () => {
    setLoading(true);
    setResult(null);
    
    try {
      const startTime = Date.now();
      await axios.options('http://localhost:8080', {
        timeout: 2000
      });
      const endTime = Date.now();
      
      setResult({
        success: true,
        message: `成功ping到后端服务器! 耗时: ${endTime - startTime}ms`
      });
    } catch (error: any) {
      console.error('Ping测试失败:', error);
      
      setResult({
        success: false,
        message: error.message || '未知错误',
        details: {
          hasResponse: !!error.response,
          hasRequest: !!error.request,
          config: error.config
        }
      });
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
      <Card>
        <Title level={2}>网络连接测试</Title>
        <Paragraph>
          此页面用于测试前端与后端的网络连接。如果你看到"网络连接失败"的错误，可以使用此页面进行诊断。
        </Paragraph>
        
        <Space direction="vertical" style={{ width: '100%', marginBottom: '20px' }}>
          <Button type="primary" onClick={testDirectConnection} loading={loading}>
            测试直接连接 (http://localhost:8080/api/products)
          </Button>
          
          <Button type="primary" onClick={testProxyConnection} loading={loading}>
            测试代理连接 (/api/products)
          </Button>
          
          <Button onClick={testPing} loading={loading}>
            Ping后端服务器 (http://localhost:8080)
          </Button>
        </Space>
        
        {loading && (
          <div style={{ textAlign: 'center', margin: '20px 0' }}>
            <Spin tip="测试中..." />
          </div>
        )}
        
        {result && (
          <Alert
            type={result.success ? 'success' : 'error'}
            message={result.success ? '连接成功' : '连接失败'}
            description={
              <div>
                <Text>{result.message}</Text>
                
                {result.details && (
                  <div style={{ marginTop: '10px' }}>
                    <Text strong>详细信息:</Text>
                    <pre style={{ 
                      background: '#f5f5f5', 
                      padding: '10px', 
                      borderRadius: '4px',
                      maxHeight: '300px',
                      overflow: 'auto'
                    }}>
                      {JSON.stringify(result.details, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            }
          />
        )}
        
        <div style={{ marginTop: '20px' }}>
          <Title level={4}>常见问题解决方案:</Title>
          <ol>
            <li>
              <Text strong>后端服务未启动</Text>
              <Paragraph>
                请确保后端服务已经启动，可以通过运行 <Text code>start_project.bat</Text> 或 <Text code>cd backend && mvn spring-boot:run</Text> 来启动后端服务。
              </Paragraph>
            </li>
            <li>
              <Text strong>端口冲突</Text>
              <Paragraph>
                确保8080端口没有被其他应用占用。可以尝试关闭可能使用此端口的其他应用。
              </Paragraph>
            </li>
            <li>
              <Text strong>数据库连接问题</Text>
              <Paragraph>
                确保MySQL数据库已启动，并且配置正确（用户名: root, 密码: 123456）。
              </Paragraph>
            </li>
            <li>
              <Text strong>防火墙或安全软件</Text>
              <Paragraph>
                检查是否有防火墙或安全软件阻止了连接。
              </Paragraph>
            </li>
          </ol>
        </div>
      </Card>
    </div>
  );
};

export default NetworkTestPage; 