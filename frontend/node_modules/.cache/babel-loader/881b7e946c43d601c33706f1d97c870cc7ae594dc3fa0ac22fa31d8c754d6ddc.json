{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalQuantity: 0,\n  totalAmount: 0,\n  isOpen: false\n};\n\n// 计算购物车总数量和总金额\nconst calculateTotals = items => {\n  let totalQuantity = 0;\n  let totalAmount = 0;\n  items.forEach(item => {\n    totalQuantity += item.quantity;\n    totalAmount += item.product.price * item.quantity;\n  });\n  return {\n    totalQuantity,\n    totalAmount\n  };\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // 添加商品到购物车\n    addToCart: (state, action) => {\n      const {\n        product,\n        quantity = 1\n      } = action.payload;\n      const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n      if (existingItemIndex >= 0) {\n        // 如果商品已存在，增加数量\n        state.items[existingItemIndex].quantity += quantity;\n      } else {\n        // 如果商品不存在，添加新项\n        state.items.push({\n          product,\n          quantity\n        });\n      }\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    },\n    // 从购物车移除商品\n    removeFromCart: (state, action) => {\n      const productId = action.payload;\n      state.items = state.items.filter(item => item.product.id !== productId);\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    },\n    // 更新商品数量\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const itemIndex = state.items.findIndex(item => item.product.id === productId);\n      if (itemIndex >= 0) {\n        if (quantity <= 0) {\n          // 如果数量为0或负数，移除商品\n          state.items.splice(itemIndex, 1);\n        } else {\n          // 更新数量\n          state.items[itemIndex].quantity = quantity;\n        }\n\n        // 重新计算总计\n        const totals = calculateTotals(state.items);\n        state.totalQuantity = totals.totalQuantity;\n        state.totalAmount = totals.totalAmount;\n      }\n    },\n    // 清空购物车\n    clearCart: state => {\n      state.items = [];\n      state.totalQuantity = 0;\n      state.totalAmount = 0;\n    },\n    // 打开购物车抽屉\n    openCart: state => {\n      state.isOpen = true;\n    },\n    // 关闭购物车抽屉\n    closeCart: state => {\n      state.isOpen = false;\n    },\n    // 切换购物车抽屉状态\n    toggleCart: state => {\n      state.isOpen = !state.isOpen;\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  openCart,\n  closeCart,\n  toggleCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","totalQuantity","totalAmount","isOpen","calculateTotals","forEach","item","quantity","product","price","cartSlice","name","reducers","addToCart","state","action","payload","existingItemIndex","findIndex","id","push","totals","removeFromCart","productId","filter","updateQuantity","itemIndex","splice","clearCart","openCart","closeCart","toggleCart","actions","reducer"],"sources":["D:/招财商城/frontend/src/store/slices/cartSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { CartItem, Product } from '../../types';\r\n\r\ninterface CartState {\r\n  items: CartItem[];\r\n  totalQuantity: number;\r\n  totalAmount: number;\r\n  isOpen: boolean; // 购物车抽屉是否打开\r\n}\r\n\r\nconst initialState: CartState = {\r\n  items: [],\r\n  totalQuantity: 0,\r\n  totalAmount: 0,\r\n  isOpen: false,\r\n};\r\n\r\n// 计算购物车总数量和总金额\r\nconst calculateTotals = (items: CartItem[]) => {\r\n  let totalQuantity = 0;\r\n  let totalAmount = 0;\r\n  \r\n  items.forEach(item => {\r\n    totalQuantity += item.quantity;\r\n    totalAmount += item.product.price * item.quantity;\r\n  });\r\n  \r\n  return { totalQuantity, totalAmount };\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    // 添加商品到购物车\r\n    addToCart: (state, action: PayloadAction<{ product: Product; quantity?: number }>) => {\r\n      const { product, quantity = 1 } = action.payload;\r\n      const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // 如果商品已存在，增加数量\r\n        state.items[existingItemIndex].quantity += quantity;\r\n      } else {\r\n        // 如果商品不存在，添加新项\r\n        state.items.push({ product, quantity });\r\n      }\r\n      \r\n      // 重新计算总计\r\n      const totals = calculateTotals(state.items);\r\n      state.totalQuantity = totals.totalQuantity;\r\n      state.totalAmount = totals.totalAmount;\r\n    },\r\n    \r\n    // 从购物车移除商品\r\n    removeFromCart: (state, action: PayloadAction<number>) => {\r\n      const productId = action.payload;\r\n      state.items = state.items.filter(item => item.product.id !== productId);\r\n      \r\n      // 重新计算总计\r\n      const totals = calculateTotals(state.items);\r\n      state.totalQuantity = totals.totalQuantity;\r\n      state.totalAmount = totals.totalAmount;\r\n    },\r\n    \r\n    // 更新商品数量\r\n    updateQuantity: (state, action: PayloadAction<{ productId: number; quantity: number }>) => {\r\n      const { productId, quantity } = action.payload;\r\n      const itemIndex = state.items.findIndex(item => item.product.id === productId);\r\n      \r\n      if (itemIndex >= 0) {\r\n        if (quantity <= 0) {\r\n          // 如果数量为0或负数，移除商品\r\n          state.items.splice(itemIndex, 1);\r\n        } else {\r\n          // 更新数量\r\n          state.items[itemIndex].quantity = quantity;\r\n        }\r\n        \r\n        // 重新计算总计\r\n        const totals = calculateTotals(state.items);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      }\r\n    },\r\n    \r\n    // 清空购物车\r\n    clearCart: (state) => {\r\n      state.items = [];\r\n      state.totalQuantity = 0;\r\n      state.totalAmount = 0;\r\n    },\r\n    \r\n    // 打开购物车抽屉\r\n    openCart: (state) => {\r\n      state.isOpen = true;\r\n    },\r\n    \r\n    // 关闭购物车抽屉\r\n    closeCart: (state) => {\r\n      state.isOpen = false;\r\n    },\r\n    \r\n    // 切换购物车抽屉状态\r\n    toggleCart: (state) => {\r\n      state.isOpen = !state.isOpen;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addToCart,\r\n  removeFromCart,\r\n  updateQuantity,\r\n  clearCart,\r\n  openCart,\r\n  closeCart,\r\n  toggleCart,\r\n} = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}