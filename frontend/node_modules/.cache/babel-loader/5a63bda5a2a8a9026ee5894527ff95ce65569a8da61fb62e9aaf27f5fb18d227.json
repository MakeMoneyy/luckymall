{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { CartService } from '../../services/cartService';\nconst initialState = {\n  items: [],\n  totalQuantity: 0,\n  totalAmount: 0,\n  isOpen: false,\n  loading: false,\n  error: null,\n  currentUserId: 1 // 临时设置用户ID为1，实际项目中从用户登录状态获取\n};\n\n// 异步action：获取购物车列表\nexport const fetchCartItems = createAsyncThunk('cart/fetchCartItems', async (userId = 1) => {\n  const response = await CartService.getCartItems(userId);\n  return response;\n});\n\n// 异步action：添加商品到购物车\nexport const addToCartAsync = createAsyncThunk('cart/addToCart', async ({\n  userId = 1,\n  productId,\n  quantity\n}) => {\n  const request = {\n    productId,\n    quantity\n  };\n  await CartService.addToCart(userId, request);\n  // 添加成功后重新获取购物车列表\n  const cartItems = await CartService.getCartItems(userId);\n  return cartItems;\n});\n\n// 异步action：更新购物车商品数量\nexport const updateCartItemAsync = createAsyncThunk('cart/updateCartItem', async ({\n  userId = 1,\n  cartItemId,\n  quantity\n}) => {\n  const request = {\n    cartItemId,\n    quantity\n  };\n  await CartService.updateCartItem(userId, request);\n  // 更新成功后重新获取购物车列表\n  const cartItems = await CartService.getCartItems(userId);\n  return cartItems;\n});\n\n// 异步action：从购物车删除商品\nexport const removeFromCartAsync = createAsyncThunk('cart/removeFromCart', async ({\n  userId = 1,\n  cartItemId\n}) => {\n  await CartService.removeCartItem(userId, cartItemId);\n  // 删除成功后重新获取购物车列表\n  const cartItems = await CartService.getCartItems(userId);\n  return cartItems;\n});\n\n// 异步action：按商品ID删除购物车商品\nexport const removeProductFromCartAsync = createAsyncThunk('cart/removeProductFromCart', async ({\n  userId = 1,\n  productId\n}) => {\n  await CartService.removeProductFromCart(userId, productId);\n  // 删除成功后重新获取购物车列表\n  const cartItems = await CartService.getCartItems(userId);\n  return cartItems;\n});\n\n// 异步action：清空购物车\nexport const clearCartAsync = createAsyncThunk('cart/clearCart', async (userId = 1) => {\n  await CartService.clearCart(userId);\n  return [];\n});\n\n// 异步action：获取购物车商品数量\nexport const fetchCartCount = createAsyncThunk('cart/fetchCartCount', async (userId = 1) => {\n  const count = await CartService.getCartCount(userId);\n  return count;\n});\n\n// 计算购物车总数量和总金额\nconst calculateTotals = items => {\n  let totalQuantity = 0;\n  let totalAmount = 0;\n  items.forEach(item => {\n    totalQuantity += item.quantity;\n    totalAmount += item.product.price * item.quantity;\n  });\n  return {\n    totalQuantity,\n    totalAmount\n  };\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // 本地添加商品到购物车（不调用API）\n    addToCartLocal: (state, action) => {\n      const {\n        product,\n        quantity = 1\n      } = action.payload;\n      const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n      if (existingItemIndex >= 0) {\n        // 如果商品已存在，增加数量\n        state.items[existingItemIndex].quantity += quantity;\n      } else {\n        // 如果商品不存在，添加新项\n        state.items.push({\n          product,\n          quantity\n        });\n      }\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    },\n    // 本地从购物车移除商品（不调用API）\n    removeFromCartLocal: (state, action) => {\n      const productId = action.payload;\n      state.items = state.items.filter(item => item.product.id !== productId);\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    },\n    // 本地更新商品数量（不调用API）\n    updateQuantityLocal: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const itemIndex = state.items.findIndex(item => item.product.id === productId);\n      if (itemIndex >= 0) {\n        if (quantity <= 0) {\n          // 如果数量为0或负数，移除商品\n          state.items.splice(itemIndex, 1);\n        } else {\n          // 更新数量\n          state.items[itemIndex].quantity = quantity;\n        }\n\n        // 重新计算总计\n        const totals = calculateTotals(state.items);\n        state.totalQuantity = totals.totalQuantity;\n        state.totalAmount = totals.totalAmount;\n      }\n    },\n    // 本地清空购物车（不调用API）\n    clearCartLocal: state => {\n      state.items = [];\n      state.totalQuantity = 0;\n      state.totalAmount = 0;\n    },\n    // 打开购物车抽屉\n    openCart: state => {\n      state.isOpen = true;\n    },\n    // 关闭购物车抽屉\n    closeCart: state => {\n      state.isOpen = false;\n    },\n    // 切换购物车抽屉状态\n    toggleCart: state => {\n      state.isOpen = !state.isOpen;\n    },\n    // 设置当前用户ID\n    setCurrentUserId: (state, action) => {\n      state.currentUserId = action.payload;\n    },\n    // 清除错误\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    // 获取购物车列表\n    builder.addCase(fetchCartItems.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchCartItems.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n      const totals = calculateTotals(action.payload);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    }).addCase(fetchCartItems.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '获取购物车失败';\n    });\n\n    // 添加商品到购物车\n    builder.addCase(addToCartAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(addToCartAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n      const totals = calculateTotals(action.payload);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    }).addCase(addToCartAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '添加到购物车失败';\n    });\n\n    // 更新购物车商品数量\n    builder.addCase(updateCartItemAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(updateCartItemAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n      const totals = calculateTotals(action.payload);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    }).addCase(updateCartItemAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '更新购物车失败';\n    });\n\n    // 从购物车删除商品\n    builder.addCase(removeFromCartAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(removeFromCartAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n      const totals = calculateTotals(action.payload);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    }).addCase(removeFromCartAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '删除商品失败';\n    });\n\n    // 按商品ID删除购物车商品\n    builder.addCase(removeProductFromCartAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(removeProductFromCartAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n      const totals = calculateTotals(action.payload);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n    }).addCase(removeProductFromCartAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '删除商品失败';\n    });\n\n    // 清空购物车\n    builder.addCase(clearCartAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(clearCartAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n      state.totalQuantity = 0;\n      state.totalAmount = 0;\n    }).addCase(clearCartAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '清空购物车失败';\n    });\n\n    // 获取购物车商品数量\n    builder.addCase(fetchCartCount.fulfilled, (state, action) => {\n      state.totalQuantity = action.payload;\n    });\n  }\n});\nexport const {\n  addToCartLocal,\n  removeFromCartLocal,\n  updateQuantityLocal,\n  clearCartLocal,\n  openCart,\n  closeCart,\n  toggleCart,\n  setCurrentUserId,\n  clearError\n} = cartSlice.actions;\n\n// 导出异步actions（向后兼容）\nexport const addToCart = addToCartAsync;\nexport const removeFromCart = removeFromCartAsync;\nexport const updateQuantity = updateCartItemAsync;\nexport const clearCart = clearCartAsync;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","CartService","initialState","items","totalQuantity","totalAmount","isOpen","loading","error","currentUserId","fetchCartItems","userId","response","getCartItems","addToCartAsync","productId","quantity","request","addToCart","cartItems","updateCartItemAsync","cartItemId","updateCartItem","removeFromCartAsync","removeCartItem","removeProductFromCartAsync","removeProductFromCart","clearCartAsync","clearCart","fetchCartCount","count","getCartCount","calculateTotals","forEach","item","product","price","cartSlice","name","reducers","addToCartLocal","state","action","payload","existingItemIndex","findIndex","id","push","totals","removeFromCartLocal","filter","updateQuantityLocal","itemIndex","splice","clearCartLocal","openCart","closeCart","toggleCart","setCurrentUserId","clearError","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","removeFromCart","updateQuantity","reducer"],"sources":["D:/招财商城/frontend/src/store/slices/cartSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { CartItem, Product, AddToCartRequest, UpdateCartRequest } from '../../types';\r\nimport { CartService } from '../../services/cartService';\r\n\r\ninterface CartState {\r\n  items: CartItem[];\r\n  totalQuantity: number;\r\n  totalAmount: number;\r\n  isOpen: boolean; // 购物车抽屉是否打开\r\n  loading: boolean;\r\n  error: string | null;\r\n  currentUserId: number; // 当前用户ID\r\n}\r\n\r\nconst initialState: CartState = {\r\n  items: [],\r\n  totalQuantity: 0,\r\n  totalAmount: 0,\r\n  isOpen: false,\r\n  loading: false,\r\n  error: null,\r\n  currentUserId: 1, // 临时设置用户ID为1，实际项目中从用户登录状态获取\r\n};\r\n\r\n// 异步action：获取购物车列表\r\nexport const fetchCartItems = createAsyncThunk(\r\n  'cart/fetchCartItems',\r\n  async (userId: number = 1) => {\r\n    const response = await CartService.getCartItems(userId);\r\n    return response;\r\n  }\r\n);\r\n\r\n// 异步action：添加商品到购物车\r\nexport const addToCartAsync = createAsyncThunk(\r\n  'cart/addToCart',\r\n  async ({ userId = 1, productId, quantity }: { userId?: number; productId: number; quantity: number }) => {\r\n    const request: AddToCartRequest = { productId, quantity };\r\n    await CartService.addToCart(userId, request);\r\n    // 添加成功后重新获取购物车列表\r\n    const cartItems = await CartService.getCartItems(userId);\r\n    return cartItems;\r\n  }\r\n);\r\n\r\n// 异步action：更新购物车商品数量\r\nexport const updateCartItemAsync = createAsyncThunk(\r\n  'cart/updateCartItem',\r\n  async ({ userId = 1, cartItemId, quantity }: { userId?: number; cartItemId: number; quantity: number }) => {\r\n    const request: UpdateCartRequest = { cartItemId, quantity };\r\n    await CartService.updateCartItem(userId, request);\r\n    // 更新成功后重新获取购物车列表\r\n    const cartItems = await CartService.getCartItems(userId);\r\n    return cartItems;\r\n  }\r\n);\r\n\r\n// 异步action：从购物车删除商品\r\nexport const removeFromCartAsync = createAsyncThunk(\r\n  'cart/removeFromCart',\r\n  async ({ userId = 1, cartItemId }: { userId?: number; cartItemId: number }) => {\r\n    await CartService.removeCartItem(userId, cartItemId);\r\n    // 删除成功后重新获取购物车列表\r\n    const cartItems = await CartService.getCartItems(userId);\r\n    return cartItems;\r\n  }\r\n);\r\n\r\n// 异步action：按商品ID删除购物车商品\r\nexport const removeProductFromCartAsync = createAsyncThunk(\r\n  'cart/removeProductFromCart',\r\n  async ({ userId = 1, productId }: { userId?: number; productId: number }) => {\r\n    await CartService.removeProductFromCart(userId, productId);\r\n    // 删除成功后重新获取购物车列表\r\n    const cartItems = await CartService.getCartItems(userId);\r\n    return cartItems;\r\n  }\r\n);\r\n\r\n// 异步action：清空购物车\r\nexport const clearCartAsync = createAsyncThunk(\r\n  'cart/clearCart',\r\n  async (userId: number = 1) => {\r\n    await CartService.clearCart(userId);\r\n    return [];\r\n  }\r\n);\r\n\r\n// 异步action：获取购物车商品数量\r\nexport const fetchCartCount = createAsyncThunk(\r\n  'cart/fetchCartCount',\r\n  async (userId: number = 1) => {\r\n    const count = await CartService.getCartCount(userId);\r\n    return count;\r\n  }\r\n);\r\n\r\n// 计算购物车总数量和总金额\r\nconst calculateTotals = (items: CartItem[]) => {\r\n  let totalQuantity = 0;\r\n  let totalAmount = 0;\r\n  \r\n  items.forEach(item => {\r\n    totalQuantity += item.quantity;\r\n    totalAmount += item.product.price * item.quantity;\r\n  });\r\n  \r\n  return { totalQuantity, totalAmount };\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    // 本地添加商品到购物车（不调用API）\r\n    addToCartLocal: (state, action: PayloadAction<{ product: Product; quantity?: number }>) => {\r\n      const { product, quantity = 1 } = action.payload;\r\n      const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // 如果商品已存在，增加数量\r\n        state.items[existingItemIndex].quantity += quantity;\r\n      } else {\r\n        // 如果商品不存在，添加新项\r\n        state.items.push({ product, quantity });\r\n      }\r\n      \r\n      // 重新计算总计\r\n      const totals = calculateTotals(state.items);\r\n      state.totalQuantity = totals.totalQuantity;\r\n      state.totalAmount = totals.totalAmount;\r\n    },\r\n    \r\n    // 本地从购物车移除商品（不调用API）\r\n    removeFromCartLocal: (state, action: PayloadAction<number>) => {\r\n      const productId = action.payload;\r\n      state.items = state.items.filter(item => item.product.id !== productId);\r\n      \r\n      // 重新计算总计\r\n      const totals = calculateTotals(state.items);\r\n      state.totalQuantity = totals.totalQuantity;\r\n      state.totalAmount = totals.totalAmount;\r\n    },\r\n    \r\n    // 本地更新商品数量（不调用API）\r\n    updateQuantityLocal: (state, action: PayloadAction<{ productId: number; quantity: number }>) => {\r\n      const { productId, quantity } = action.payload;\r\n      const itemIndex = state.items.findIndex(item => item.product.id === productId);\r\n      \r\n      if (itemIndex >= 0) {\r\n        if (quantity <= 0) {\r\n          // 如果数量为0或负数，移除商品\r\n          state.items.splice(itemIndex, 1);\r\n        } else {\r\n          // 更新数量\r\n          state.items[itemIndex].quantity = quantity;\r\n        }\r\n        \r\n        // 重新计算总计\r\n        const totals = calculateTotals(state.items);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      }\r\n    },\r\n    \r\n    // 本地清空购物车（不调用API）\r\n    clearCartLocal: (state) => {\r\n      state.items = [];\r\n      state.totalQuantity = 0;\r\n      state.totalAmount = 0;\r\n    },\r\n    \r\n    // 打开购物车抽屉\r\n    openCart: (state) => {\r\n      state.isOpen = true;\r\n    },\r\n    \r\n    // 关闭购物车抽屉\r\n    closeCart: (state) => {\r\n      state.isOpen = false;\r\n    },\r\n    \r\n    // 切换购物车抽屉状态\r\n    toggleCart: (state) => {\r\n      state.isOpen = !state.isOpen;\r\n    },\r\n    \r\n    // 设置当前用户ID\r\n    setCurrentUserId: (state, action: PayloadAction<number>) => {\r\n      state.currentUserId = action.payload;\r\n    },\r\n    \r\n    // 清除错误\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // 获取购物车列表\r\n    builder\r\n      .addCase(fetchCartItems.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchCartItems.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.items = action.payload;\r\n        const totals = calculateTotals(action.payload);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      })\r\n      .addCase(fetchCartItems.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '获取购物车失败';\r\n      });\r\n    \r\n    // 添加商品到购物车\r\n    builder\r\n      .addCase(addToCartAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(addToCartAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.items = action.payload;\r\n        const totals = calculateTotals(action.payload);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      })\r\n      .addCase(addToCartAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '添加到购物车失败';\r\n      });\r\n    \r\n    // 更新购物车商品数量\r\n    builder\r\n      .addCase(updateCartItemAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(updateCartItemAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.items = action.payload;\r\n        const totals = calculateTotals(action.payload);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      })\r\n      .addCase(updateCartItemAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '更新购物车失败';\r\n      });\r\n    \r\n    // 从购物车删除商品\r\n    builder\r\n      .addCase(removeFromCartAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(removeFromCartAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.items = action.payload;\r\n        const totals = calculateTotals(action.payload);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      })\r\n      .addCase(removeFromCartAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '删除商品失败';\r\n      });\r\n    \r\n    // 按商品ID删除购物车商品\r\n    builder\r\n      .addCase(removeProductFromCartAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(removeProductFromCartAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.items = action.payload;\r\n        const totals = calculateTotals(action.payload);\r\n        state.totalQuantity = totals.totalQuantity;\r\n        state.totalAmount = totals.totalAmount;\r\n      })\r\n      .addCase(removeProductFromCartAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '删除商品失败';\r\n      });\r\n    \r\n    // 清空购物车\r\n    builder\r\n      .addCase(clearCartAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(clearCartAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.items = action.payload;\r\n        state.totalQuantity = 0;\r\n        state.totalAmount = 0;\r\n      })\r\n      .addCase(clearCartAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '清空购物车失败';\r\n      });\r\n    \r\n    // 获取购物车商品数量\r\n    builder\r\n      .addCase(fetchCartCount.fulfilled, (state, action) => {\r\n        state.totalQuantity = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  addToCartLocal,\r\n  removeFromCartLocal,\r\n  updateQuantityLocal,\r\n  clearCartLocal,\r\n  openCart,\r\n  closeCart,\r\n  toggleCart,\r\n  setCurrentUserId,\r\n  clearError,\r\n} = cartSlice.actions;\r\n\r\n// 导出异步actions（向后兼容）\r\nexport const addToCart = addToCartAsync;\r\nexport const removeFromCart = removeFromCartAsync;\r\nexport const updateQuantity = updateCartItemAsync;\r\nexport const clearCart = clearCartAsync;\r\n\r\nexport default cartSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}