{"ast":null,"code":"import axios from 'axios';\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  var _config$method;\n  // 在这里可以添加token等认证信息\n  console.log('发送请求:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  const data = response.data;\n  console.log('收到响应:', response.status, data.message);\n\n  // 检查业务状态码\n  if (data.code === 200) {\n    return response;\n  } else {\n    console.error('业务错误:', data.message);\n    return Promise.reject(new Error(data.message));\n  }\n}, error => {\n  console.error('响应错误:', error.message);\n  if (error.response) {\n    // 服务器返回错误状态码\n    const {\n      status,\n      statusText\n    } = error.response;\n    const message = `服务器错误 ${status}: ${statusText}`;\n    return Promise.reject(new Error(message));\n  } else if (error.request) {\n    // 请求发送但没有收到响应\n    return Promise.reject(new Error('网络连接失败，请检查网络设置'));\n  } else {\n    // 其他错误\n    return Promise.reject(error);\n  }\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","data","status","message","code","Error","statusText"],"sources":["D:/招财商城/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ApiResponse } from '../types';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 在这里可以添加token等认证信息\r\n    console.log('发送请求:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    const data: ApiResponse = response.data;\r\n    console.log('收到响应:', response.status, data.message);\r\n    \r\n    // 检查业务状态码\r\n    if (data.code === 200) {\r\n      return response;\r\n    } else {\r\n      console.error('业务错误:', data.message);\r\n      return Promise.reject(new Error(data.message));\r\n    }\r\n  },\r\n  (error) => {\r\n    console.error('响应错误:', error.message);\r\n    \r\n    if (error.response) {\r\n      // 服务器返回错误状态码\r\n      const { status, statusText } = error.response;\r\n      const message = `服务器错误 ${status}: ${statusText}`;\r\n      return Promise.reject(new Error(message));\r\n    } else if (error.request) {\r\n      // 请求发送但没有收到响应\r\n      return Promise.reject(new Error('网络连接失败，请检查网络设置'));\r\n    } else {\r\n      // 其他错误\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACV;EACAC,OAAO,CAACC,GAAG,CAAC,OAAO,GAAAF,cAAA,GAAED,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,EAAEL,MAAM,CAACM,GAAG,CAAC;EAC9D,OAAON,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAK;EACZ,MAAMC,IAAiB,GAAGD,QAAQ,CAACC,IAAI;EACvCT,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEO,QAAQ,CAACE,MAAM,EAAED,IAAI,CAACE,OAAO,CAAC;;EAEnD;EACA,IAAIF,IAAI,CAACG,IAAI,KAAK,GAAG,EAAE;IACrB,OAAOJ,QAAQ;EACjB,CAAC,MAAM;IACLR,OAAO,CAACK,KAAK,CAAC,OAAO,EAAEI,IAAI,CAACE,OAAO,CAAC;IACpC,OAAOL,OAAO,CAACC,MAAM,CAAC,IAAIM,KAAK,CAACJ,IAAI,CAACE,OAAO,CAAC,CAAC;EAChD;AACF,CAAC,EACAN,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACM,OAAO,CAAC;EAErC,IAAIN,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,MAAM;MAAEE,MAAM;MAAEI;IAAW,CAAC,GAAGT,KAAK,CAACG,QAAQ;IAC7C,MAAMG,OAAO,GAAG,SAASD,MAAM,KAAKI,UAAU,EAAE;IAChD,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIM,KAAK,CAACF,OAAO,CAAC,CAAC;EAC3C,CAAC,MAAM,IAAIN,KAAK,CAACT,OAAO,EAAE;IACxB;IACA,OAAOU,OAAO,CAACC,MAAM,CAAC,IAAIM,KAAK,CAAC,gBAAgB,CAAC,CAAC;EACpD,CAAC,MAAM;IACL;IACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B;AACF,CACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}