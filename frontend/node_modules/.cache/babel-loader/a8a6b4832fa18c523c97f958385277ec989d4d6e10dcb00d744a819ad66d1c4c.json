{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { OrderService } from '../../services/orderService';\n\n// 模拟用户ID\nconst MOCK_USER_ID = 1;\n\n// 异步action：创建订单\nexport const createOrderAsync = createAsyncThunk('order/createOrder', async (request, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await OrderService.createOrder(MOCK_USER_ID, request);\n    return response;\n  } catch (error) {\n    return rejectWithValue('创建订单失败');\n  }\n});\n\n// 异步action：获取用户订单列表\nexport const fetchUserOrdersAsync = createAsyncThunk('order/fetchUserOrders', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('获取用户订单列表');\n\n    // 尝试从localStorage获取订单数据\n    const localOrdersStr = localStorage.getItem('orders');\n    if (localOrdersStr) {\n      try {\n        const localOrders = JSON.parse(localOrdersStr);\n        console.log('从localStorage加载订单数据:', localOrders);\n        if (Array.isArray(localOrders) && localOrders.length > 0) {\n          // 确保所有订单都有状态\n          const ordersWithStatus = localOrders.map(order => {\n            if (!order.status) {\n              return {\n                ...order,\n                status: 'PENDING_PAYMENT'\n              };\n            }\n            return order;\n          });\n          return ordersWithStatus;\n        }\n      } catch (parseError) {\n        console.error('解析localStorage订单数据失败:', parseError);\n      }\n    }\n\n    // 如果localStorage中没有数据，则从API获取\n    const orders = await OrderService.getOrdersByUserId(MOCK_USER_ID);\n    console.log('从API获取到的订单列表:', orders);\n\n    // 确保所有订单都有状态\n    const ordersWithStatus = orders.map(order => {\n      if (!order.status) {\n        return {\n          ...order,\n          status: 'PENDING_PAYMENT'\n        };\n      }\n      return order;\n    });\n\n    // 保存到localStorage\n    localStorage.setItem('orders', JSON.stringify(ordersWithStatus));\n    return ordersWithStatus;\n  } catch (error) {\n    console.error('获取订单列表失败:', error);\n    return rejectWithValue('获取订单列表失败');\n  }\n});\n\n// 异步action：取消订单\nexport const cancelOrderAsync = createAsyncThunk('order/cancelOrder', async (orderId, {\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    console.log('取消订单:', orderId);\n\n    // 直接在本地更新订单状态\n    const localOrdersStr = localStorage.getItem('orders');\n    if (localOrdersStr) {\n      try {\n        const localOrders = JSON.parse(localOrdersStr);\n        const orderIndex = localOrders.findIndex(order => order.id === orderId || order.id === orderId.toString());\n        if (orderIndex !== -1) {\n          localOrders[orderIndex].status = 'CANCELLED';\n          localStorage.setItem('orders', JSON.stringify(localOrders));\n          console.log('本地订单状态已更新为已取消');\n\n          // 返回更新后的订单\n          return {\n            id: orderId,\n            status: 'CANCELLED'\n          };\n        }\n      } catch (parseError) {\n        console.error('解析localStorage订单数据失败:', parseError);\n      }\n    }\n\n    // 如果本地更新失败，则调用API\n    // 转换为数字类型，如果是字符串的话\n    const numericOrderId = typeof orderId === 'string' ? parseInt(orderId) : orderId;\n    await OrderService.cancelOrder(numericOrderId, MOCK_USER_ID);\n    return {\n      id: orderId,\n      status: 'CANCELLED'\n    }; // 返回原始orderId和状态\n  } catch (error) {\n    console.error('取消订单失败:', error);\n    return rejectWithValue('取消订单失败');\n  }\n});\n\n// 异步action：确认收货\nexport const confirmReceiveAsync = createAsyncThunk('order/confirmReceive', async (orderId, {\n  rejectWithValue\n}) => {\n  try {\n    await OrderService.confirmReceive(orderId, MOCK_USER_ID);\n    return orderId;\n  } catch (error) {\n    return rejectWithValue('确认收货失败');\n  }\n});\nconst initialState = {\n  orders: JSON.parse(localStorage.getItem('orders') || '[]'),\n  currentOrder: null,\n  loading: false,\n  error: null\n};\nconst orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    clearCurrentOrder: state => {\n      state.currentOrder = null;\n    },\n    // 添加订单到本地存储（用于模拟）\n    addLocalOrder: (state, action) => {\n      const newOrder = action.payload;\n      console.log('添加/更新订单:', newOrder);\n\n      // 检查是否已存在相同ID的订单\n      const existingOrderIndex = state.orders.findIndex(order => order.id === newOrder.id);\n      if (existingOrderIndex !== -1) {\n        // 如果订单已存在，更新它\n        console.log('更新已存在的订单:', existingOrderIndex);\n        const updatedOrder = {\n          ...state.orders[existingOrderIndex],\n          ...newOrder\n        };\n\n        // 确保状态字段存在\n        if (!updatedOrder.status) {\n          updatedOrder.status = 'PENDING_PAYMENT'; // 默认为待付款\n        }\n        state.orders[existingOrderIndex] = updatedOrder;\n        console.log('更新后的订单:', updatedOrder);\n      } else {\n        // 如果订单不存在，添加它\n        console.log('添加新订单');\n        // 确保状态字段存在\n        if (!newOrder.status) {\n          newOrder.status = 'PENDING_PAYMENT'; // 默认为待付款\n        }\n\n        // 确保订单有items字段\n        if (!newOrder.items) {\n          newOrder.items = [];\n        }\n        state.orders.unshift(newOrder);\n        console.log('添加后的订单列表长度:', state.orders.length);\n      }\n\n      // 保存到localStorage\n      localStorage.setItem('orders', JSON.stringify(state.orders));\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // 创建订单\n    .addCase(createOrderAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createOrderAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentOrder = action.payload;\n    }).addCase(createOrderAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // 获取用户订单列表\n    .addCase(fetchUserOrdersAsync.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders = action.payload;\n    }).addCase(fetchUserOrdersAsync.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // 取消订单\n    .addCase(cancelOrderAsync.fulfilled, (state, action) => {\n      const {\n        id,\n        status\n      } = action.payload;\n      console.log('取消订单成功, orderId:', id, 'status:', status);\n      const orderIndex = state.orders.findIndex(order => order.id === id || order.id === id.toString());\n      if (orderIndex !== -1) {\n        console.log('找到订单，更新状态为已取消');\n        state.orders[orderIndex].status = status;\n        // 保存到localStorage\n        localStorage.setItem('orders', JSON.stringify(state.orders));\n      } else {\n        console.log('未找到订单:', id);\n      }\n    })\n\n    // 确认收货\n    .addCase(confirmReceiveAsync.fulfilled, (state, action) => {\n      const orderId = action.payload;\n      const orderIndex = state.orders.findIndex(order => Number(order.id) === orderId);\n      if (orderIndex !== -1) {\n        state.orders[orderIndex].status = 'COMPLETED';\n      }\n    });\n  }\n});\nexport const {\n  clearCurrentOrder,\n  addLocalOrder\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","OrderService","MOCK_USER_ID","createOrderAsync","request","rejectWithValue","response","createOrder","error","fetchUserOrdersAsync","_","console","log","localOrdersStr","localStorage","getItem","localOrders","JSON","parse","Array","isArray","length","ordersWithStatus","map","order","status","parseError","orders","getOrdersByUserId","setItem","stringify","cancelOrderAsync","orderId","dispatch","orderIndex","findIndex","id","toString","numericOrderId","parseInt","cancelOrder","confirmReceiveAsync","confirmReceive","initialState","currentOrder","loading","orderSlice","name","reducers","clearCurrentOrder","state","addLocalOrder","action","newOrder","payload","existingOrderIndex","updatedOrder","items","unshift","extraReducers","builder","addCase","pending","fulfilled","rejected","Number","actions","reducer"],"sources":["D:/luckymall/frontend/src/store/slices/orderSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Order } from '../../types';\r\nimport { OrderService, CreateOrderRequest, CreateOrderResponse } from '../../services/orderService';\r\n\r\n// 模拟用户ID\r\nconst MOCK_USER_ID = 1;\r\n\r\n// 异步action：创建订单\r\nexport const createOrderAsync = createAsyncThunk(\r\n  'order/createOrder',\r\n  async (request: CreateOrderRequest, { rejectWithValue }) => {\r\n    try {\r\n      const response = await OrderService.createOrder(MOCK_USER_ID, request);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue('创建订单失败');\r\n    }\r\n  }\r\n);\r\n\r\n// 异步action：获取用户订单列表\r\nexport const fetchUserOrdersAsync = createAsyncThunk(\r\n  'order/fetchUserOrders',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      console.log('获取用户订单列表');\r\n      \r\n      // 尝试从localStorage获取订单数据\r\n      const localOrdersStr = localStorage.getItem('orders');\r\n      if (localOrdersStr) {\r\n        try {\r\n          const localOrders = JSON.parse(localOrdersStr);\r\n          console.log('从localStorage加载订单数据:', localOrders);\r\n          if (Array.isArray(localOrders) && localOrders.length > 0) {\r\n            // 确保所有订单都有状态\r\n            const ordersWithStatus = localOrders.map(order => {\r\n              if (!order.status) {\r\n                return { ...order, status: 'PENDING_PAYMENT' };\r\n              }\r\n              return order;\r\n            });\r\n            return ordersWithStatus;\r\n          }\r\n        } catch (parseError) {\r\n          console.error('解析localStorage订单数据失败:', parseError);\r\n        }\r\n      }\r\n      \r\n      // 如果localStorage中没有数据，则从API获取\r\n      const orders = await OrderService.getOrdersByUserId(MOCK_USER_ID);\r\n      console.log('从API获取到的订单列表:', orders);\r\n      \r\n      // 确保所有订单都有状态\r\n      const ordersWithStatus = orders.map(order => {\r\n        if (!order.status) {\r\n          return { ...order, status: 'PENDING_PAYMENT' };\r\n        }\r\n        return order;\r\n      });\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('orders', JSON.stringify(ordersWithStatus));\r\n      \r\n      return ordersWithStatus;\r\n    } catch (error) {\r\n      console.error('获取订单列表失败:', error);\r\n      return rejectWithValue('获取订单列表失败');\r\n    }\r\n  }\r\n);\r\n\r\n// 异步action：取消订单\r\nexport const cancelOrderAsync = createAsyncThunk(\r\n  'order/cancelOrder',\r\n  async (orderId: number | string, { rejectWithValue, dispatch }) => {\r\n    try {\r\n      console.log('取消订单:', orderId);\r\n      \r\n      // 直接在本地更新订单状态\r\n      const localOrdersStr = localStorage.getItem('orders');\r\n      if (localOrdersStr) {\r\n        try {\r\n          const localOrders = JSON.parse(localOrdersStr);\r\n          const orderIndex = localOrders.findIndex((order: any) => \r\n            order.id === orderId || order.id === orderId.toString()\r\n          );\r\n          \r\n          if (orderIndex !== -1) {\r\n            localOrders[orderIndex].status = 'CANCELLED';\r\n            localStorage.setItem('orders', JSON.stringify(localOrders));\r\n            console.log('本地订单状态已更新为已取消');\r\n            \r\n            // 返回更新后的订单\r\n            return {\r\n              id: orderId,\r\n              status: 'CANCELLED'\r\n            };\r\n          }\r\n        } catch (parseError) {\r\n          console.error('解析localStorage订单数据失败:', parseError);\r\n        }\r\n      }\r\n      \r\n      // 如果本地更新失败，则调用API\r\n      // 转换为数字类型，如果是字符串的话\r\n      const numericOrderId = typeof orderId === 'string' ? parseInt(orderId) : orderId;\r\n      await OrderService.cancelOrder(numericOrderId, MOCK_USER_ID);\r\n      return {\r\n        id: orderId,\r\n        status: 'CANCELLED'\r\n      }; // 返回原始orderId和状态\r\n    } catch (error) {\r\n      console.error('取消订单失败:', error);\r\n      return rejectWithValue('取消订单失败');\r\n    }\r\n  }\r\n);\r\n\r\n// 异步action：确认收货\r\nexport const confirmReceiveAsync = createAsyncThunk(\r\n  'order/confirmReceive',\r\n  async (orderId: number, { rejectWithValue }) => {\r\n    try {\r\n      await OrderService.confirmReceive(orderId, MOCK_USER_ID);\r\n      return orderId;\r\n    } catch (error) {\r\n      return rejectWithValue('确认收货失败');\r\n    }\r\n  }\r\n);\r\n\r\ninterface OrderState {\r\n  orders: Order[];\r\n  currentOrder: CreateOrderResponse | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: OrderState = {\r\n  orders: JSON.parse(localStorage.getItem('orders') || '[]'),\r\n  currentOrder: null,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nconst orderSlice = createSlice({\r\n  name: 'order',\r\n  initialState,\r\n  reducers: {\r\n    clearCurrentOrder: (state) => {\r\n      state.currentOrder = null;\r\n    },\r\n    // 添加订单到本地存储（用于模拟）\r\n    addLocalOrder: (state, action: PayloadAction<Order>) => {\r\n      const newOrder = action.payload;\r\n      console.log('添加/更新订单:', newOrder);\r\n      \r\n      // 检查是否已存在相同ID的订单\r\n      const existingOrderIndex = state.orders.findIndex(order => order.id === newOrder.id);\r\n      \r\n      if (existingOrderIndex !== -1) {\r\n        // 如果订单已存在，更新它\r\n        console.log('更新已存在的订单:', existingOrderIndex);\r\n        const updatedOrder = {\r\n          ...state.orders[existingOrderIndex],\r\n          ...newOrder\r\n        };\r\n        \r\n        // 确保状态字段存在\r\n        if (!updatedOrder.status) {\r\n          updatedOrder.status = 'PENDING_PAYMENT'; // 默认为待付款\r\n        }\r\n        \r\n        state.orders[existingOrderIndex] = updatedOrder;\r\n        console.log('更新后的订单:', updatedOrder);\r\n      } else {\r\n        // 如果订单不存在，添加它\r\n        console.log('添加新订单');\r\n        // 确保状态字段存在\r\n        if (!newOrder.status) {\r\n          newOrder.status = 'PENDING_PAYMENT'; // 默认为待付款\r\n        }\r\n        \r\n        // 确保订单有items字段\r\n        if (!newOrder.items) {\r\n          newOrder.items = [];\r\n        }\r\n        \r\n        state.orders.unshift(newOrder);\r\n        console.log('添加后的订单列表长度:', state.orders.length);\r\n      }\r\n      \r\n      // 保存到localStorage\r\n      localStorage.setItem('orders', JSON.stringify(state.orders));\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // 创建订单\r\n      .addCase(createOrderAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.currentOrder = action.payload;\r\n      })\r\n      .addCase(createOrderAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload as string;\r\n      })\r\n      \r\n      // 获取用户订单列表\r\n      .addCase(fetchUserOrdersAsync.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.orders = action.payload;\r\n      })\r\n      .addCase(fetchUserOrdersAsync.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload as string;\r\n      })\r\n      \r\n      // 取消订单\r\n      .addCase(cancelOrderAsync.fulfilled, (state, action) => {\r\n        const { id, status } = action.payload;\r\n        console.log('取消订单成功, orderId:', id, 'status:', status);\r\n        \r\n        const orderIndex = state.orders.findIndex(order => \r\n          order.id === id || order.id === id.toString()\r\n        );\r\n        \r\n        if (orderIndex !== -1) {\r\n          console.log('找到订单，更新状态为已取消');\r\n          state.orders[orderIndex].status = status;\r\n          // 保存到localStorage\r\n          localStorage.setItem('orders', JSON.stringify(state.orders));\r\n        } else {\r\n          console.log('未找到订单:', id);\r\n        }\r\n      })\r\n      \r\n      // 确认收货\r\n      .addCase(confirmReceiveAsync.fulfilled, (state, action) => {\r\n        const orderId = action.payload;\r\n        const orderIndex = state.orders.findIndex(order => Number(order.id) === orderId);\r\n        if (orderIndex !== -1) {\r\n          state.orders[orderIndex].status = 'COMPLETED';\r\n        }\r\n      });\r\n  }\r\n});\r\n\r\nexport const { clearCurrentOrder, addLocalOrder } = orderSlice.actions;\r\n\r\nexport default orderSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}