{"ast":null,"code":"import axios from'axios';// 创建axios实例\nconst api=axios.create({baseURL:'http://localhost:8080',timeout:10000,headers:{'Content-Type':'application/json'}});// 请求拦截器\napi.interceptors.request.use(config=>{var _config$method;// 在这里可以添加token等认证信息\nconsole.log('发送请求:',(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;},error=>{console.error('请求错误:',error);return Promise.reject(error);});// 响应拦截器\napi.interceptors.response.use(response=>{const data=response.data;console.log('收到响应:',response.status,data.message);// 检查业务状态码\nif(data.code===200){return response;}else{console.error('业务错误:',data.message);return Promise.reject(new Error(data.message));}},error=>{console.error('响应错误:',error.message);if(error.response){// 服务器返回错误状态码\nconst{status,statusText}=error.response;const message=`服务器错误 ${status}: ${statusText}`;return Promise.reject(new Error(message));}else if(error.request){// 请求发送但没有收到响应\nreturn Promise.reject(new Error('网络连接失败，请检查网络设置'));}else{// 其他错误\nreturn Promise.reject(error);}});export default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","data","status","message","code","Error","statusText"],"sources":["D:/luckymall/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ApiResponse } from '../types';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // 在这里可以添加token等认证信息\r\n    console.log('发送请求:', config.method?.toUpperCase(), config.url);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('请求错误:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    const data: ApiResponse = response.data;\r\n    console.log('收到响应:', response.status, data.message);\r\n    \r\n    // 检查业务状态码\r\n    if (data.code === 200) {\r\n      return response;\r\n    } else {\r\n      console.error('业务错误:', data.message);\r\n      return Promise.reject(new Error(data.message));\r\n    }\r\n  },\r\n  (error) => {\r\n    console.error('响应错误:', error.message);\r\n    \r\n    if (error.response) {\r\n      // 服务器返回错误状态码\r\n      const { status, statusText } = error.response;\r\n      const message = `服务器错误 ${status}: ${statusText}`;\r\n      return Promise.reject(new Error(message));\r\n    } else if (error.request) {\r\n      // 请求发送但没有收到响应\r\n      return Promise.reject(new Error('网络连接失败，请检查网络设置'));\r\n    } else {\r\n      // 其他错误\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport default api; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAE,uBAAuB,CAChCC,OAAO,CAAE,KAAK,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,KAAAC,cAAA,CACV;AACAC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAAF,cAAA,CAAED,MAAM,CAACI,MAAM,UAAAH,cAAA,iBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,CAAEL,MAAM,CAACM,GAAG,CAAC,CAC9D,MAAO,CAAAN,MAAM,CACf,CAAC,CACAO,KAAK,EAAK,CACTL,OAAO,CAACK,KAAK,CAAC,OAAO,CAAEA,KAAK,CAAC,CAC7B,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACAf,GAAG,CAACK,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,EAAK,CACZ,KAAM,CAAAC,IAAiB,CAAGD,QAAQ,CAACC,IAAI,CACvCT,OAAO,CAACC,GAAG,CAAC,OAAO,CAAEO,QAAQ,CAACE,MAAM,CAAED,IAAI,CAACE,OAAO,CAAC,CAEnD;AACA,GAAIF,IAAI,CAACG,IAAI,GAAK,GAAG,CAAE,CACrB,MAAO,CAAAJ,QAAQ,CACjB,CAAC,IAAM,CACLR,OAAO,CAACK,KAAK,CAAC,OAAO,CAAEI,IAAI,CAACE,OAAO,CAAC,CACpC,MAAO,CAAAL,OAAO,CAACC,MAAM,CAAC,GAAI,CAAAM,KAAK,CAACJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAChD,CACF,CAAC,CACAN,KAAK,EAAK,CACTL,OAAO,CAACK,KAAK,CAAC,OAAO,CAAEA,KAAK,CAACM,OAAO,CAAC,CAErC,GAAIN,KAAK,CAACG,QAAQ,CAAE,CAClB;AACA,KAAM,CAAEE,MAAM,CAAEI,UAAW,CAAC,CAAGT,KAAK,CAACG,QAAQ,CAC7C,KAAM,CAAAG,OAAO,CAAG,SAASD,MAAM,KAAKI,UAAU,EAAE,CAChD,MAAO,CAAAR,OAAO,CAACC,MAAM,CAAC,GAAI,CAAAM,KAAK,CAACF,OAAO,CAAC,CAAC,CAC3C,CAAC,IAAM,IAAIN,KAAK,CAACT,OAAO,CAAE,CACxB;AACA,MAAO,CAAAU,OAAO,CAACC,MAAM,CAAC,GAAI,CAAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC,CACpD,CAAC,IAAM,CACL;AACA,MAAO,CAAAP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CACF,CAAC,CAED,cAAe,CAAAf,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}