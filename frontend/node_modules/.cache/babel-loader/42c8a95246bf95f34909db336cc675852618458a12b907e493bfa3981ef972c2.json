{"ast":null,"code":"import api from './api';\n/**\n * 商品服务类\n */\nexport class ProductService {\n  /**\n   * 获取商品列表\n   */\n  static async getProducts(params = {}) {\n    const response = await api.get('/api/products', {\n      params\n    });\n    return response.data.data;\n  }\n\n  /**\n   * 根据ID获取商品详情\n   */\n  static async getProductById(id) {\n    console.log('ProductService.getProductById 调用, ID:', id);\n    try {\n      // 尝试使用不同的API路径\n      const response = await api.get(`/api/products/detail/${id}`);\n      console.log('ProductService.getProductById 成功, 响应:', response.data);\n      return response.data.data;\n    } catch (error) {\n      console.error('ProductService.getProductById 失败:', error);\n      // 如果失败，尝试原始路径\n      try {\n        const response = await api.get(`/api/products/${id}`);\n        console.log('ProductService.getProductById 原始路径成功, 响应:', response.data);\n        return response.data.data;\n      } catch (secondError) {\n        console.error('ProductService.getProductById 原始路径也失败:', secondError);\n        throw secondError;\n      }\n    }\n  }\n\n  /**\n   * 搜索商品\n   */\n  static async searchProducts(params) {\n    const response = await api.get('/api/products/search', {\n      params\n    });\n    return response.data.data;\n  }\n\n  /**\n   * 获取所有分类\n   */\n  static async getAllCategories() {\n    const response = await api.get('/api/categories');\n    return response.data.data;\n  }\n\n  /**\n   * 获取顶级分类\n   */\n  static async getTopCategories() {\n    const response = await api.get('/api/categories/top');\n    return response.data.data;\n  }\n\n  /**\n   * 根据父分类ID获取子分类\n   */\n  static async getCategoriesByParentId(parentId) {\n    const response = await api.get(`/api/categories/parent/${parentId}`);\n    return response.data.data;\n  }\n\n  /**\n   * 根据ID获取分类详情\n   */\n  static async getCategoryById(id) {\n    const response = await api.get(`/api/categories/${id}`);\n    return response.data.data;\n  }\n}","map":{"version":3,"names":["api","ProductService","getProducts","params","response","get","data","getProductById","id","console","log","error","secondError","searchProducts","getAllCategories","getTopCategories","getCategoriesByParentId","parentId","getCategoryById"],"sources":["D:/luckymall/frontend/src/services/productService.ts"],"sourcesContent":["import api from './api';\nimport { \n  Product, \n  Category, \n  ApiResponse, \n  PageResult, \n  ProductQueryParams, \n  ProductSearchParams \n} from '../types';\n\n/**\n * 商品服务类\n */\nexport class ProductService {\n  \n  /**\n   * 获取商品列表\n   */\n  static async getProducts(params: ProductQueryParams = {}): Promise<PageResult<Product>> {\n    const response = await api.get<ApiResponse<PageResult<Product>>>('/api/products', { params });\n    return response.data.data;\n  }\n\n  /**\n   * 根据ID获取商品详情\n   */\n  static async getProductById(id: number): Promise<Product> {\n    console.log('ProductService.getProductById 调用, ID:', id);\n    try {\n      // 尝试使用不同的API路径\n      const response = await api.get<ApiResponse<Product>>(`/api/products/detail/${id}`);\n      console.log('ProductService.getProductById 成功, 响应:', response.data);\n      return response.data.data;\n    } catch (error) {\n      console.error('ProductService.getProductById 失败:', error);\n      // 如果失败，尝试原始路径\n      try {\n        const response = await api.get<ApiResponse<Product>>(`/api/products/${id}`);\n        console.log('ProductService.getProductById 原始路径成功, 响应:', response.data);\n        return response.data.data;\n      } catch (secondError) {\n        console.error('ProductService.getProductById 原始路径也失败:', secondError);\n        throw secondError;\n      }\n    }\n  }\n\n  /**\n   * 搜索商品\n   */\n  static async searchProducts(params: ProductSearchParams): Promise<PageResult<Product>> {\n    const response = await api.get<ApiResponse<PageResult<Product>>>('/api/products/search', { params });\n    return response.data.data;\n  }\n\n  /**\n   * 获取所有分类\n   */\n  static async getAllCategories(): Promise<Category[]> {\n    const response = await api.get<ApiResponse<Category[]>>('/api/categories');\n    return response.data.data;\n  }\n\n  /**\n   * 获取顶级分类\n   */\n  static async getTopCategories(): Promise<Category[]> {\n    const response = await api.get<ApiResponse<Category[]>>('/api/categories/top');\n    return response.data.data;\n  }\n\n  /**\n   * 根据父分类ID获取子分类\n   */\n  static async getCategoriesByParentId(parentId: number): Promise<Category[]> {\n    const response = await api.get<ApiResponse<Category[]>>(`/api/categories/parent/${parentId}`);\n    return response.data.data;\n  }\n\n  /**\n   * 根据ID获取分类详情\n   */\n  static async getCategoryById(id: number): Promise<Category> {\n    const response = await api.get<ApiResponse<Category>>(`/api/categories/${id}`);\n    return response.data.data;\n  }\n} "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAUvB;AACA;AACA;AACA,OAAO,MAAMC,cAAc,CAAC;EAE1B;AACF;AACA;EACE,aAAaC,WAAWA,CAACC,MAA0B,GAAG,CAAC,CAAC,EAAgC;IACtF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAmC,eAAe,EAAE;MAAEF;IAAO,CAAC,CAAC;IAC7F,OAAOC,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaC,cAAcA,CAACC,EAAU,EAAoB;IACxDC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEF,EAAE,CAAC;IACxD,IAAI;MACF;MACA,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAuB,wBAAwBG,EAAE,EAAE,CAAC;MAClFC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEN,QAAQ,CAACE,IAAI,CAAC;MACnE,OAAOF,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD;MACA,IAAI;QACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAuB,iBAAiBG,EAAE,EAAE,CAAC;QAC3EC,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEN,QAAQ,CAACE,IAAI,CAAC;QACvE,OAAOF,QAAQ,CAACE,IAAI,CAACA,IAAI;MAC3B,CAAC,CAAC,OAAOM,WAAW,EAAE;QACpBH,OAAO,CAACE,KAAK,CAAC,wCAAwC,EAAEC,WAAW,CAAC;QACpE,MAAMA,WAAW;MACnB;IACF;EACF;;EAEA;AACF;AACA;EACE,aAAaC,cAAcA,CAACV,MAA2B,EAAgC;IACrF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAmC,sBAAsB,EAAE;MAAEF;IAAO,CAAC,CAAC;IACpG,OAAOC,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaQ,gBAAgBA,CAAA,EAAwB;IACnD,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAA0B,iBAAiB,CAAC;IAC1E,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaS,gBAAgBA,CAAA,EAAwB;IACnD,MAAMX,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAA0B,qBAAqB,CAAC;IAC9E,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaU,uBAAuBA,CAACC,QAAgB,EAAuB;IAC1E,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAA0B,0BAA0BY,QAAQ,EAAE,CAAC;IAC7F,OAAOb,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAaY,eAAeA,CAACV,EAAU,EAAqB;IAC1D,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAwB,mBAAmBG,EAAE,EAAE,CAAC;IAC9E,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}