{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { CartService } from '../../services/cartService';\n\n// 模拟用户ID\nconst MOCK_USER_ID = 1;\n\n// 保存购物车数据到localStorage\nconst saveCartToLocalStorage = items => {\n  try {\n    localStorage.setItem('cartItems', JSON.stringify(items));\n  } catch (error) {\n    console.error('保存购物车数据到localStorage失败:', error);\n  }\n};\n\n// 从localStorage加载购物车数据\nconst loadCartFromLocalStorage = () => {\n  try {\n    const cartItemsStr = localStorage.getItem('cartItems');\n    if (cartItemsStr) {\n      return JSON.parse(cartItemsStr);\n    }\n  } catch (error) {\n    console.error('从localStorage加载购物车数据失败:', error);\n  }\n  return [];\n};\n\n// 异步action：添加商品到购物车\nexport const addToCartAsync = createAsyncThunk('cart/addToCartAsync', async ({\n  product,\n  quantity\n}, {\n  dispatch,\n  getState\n}) => {\n  try {\n    // 调用后端API\n    await CartService.addToCart(MOCK_USER_ID, product.id, quantity);\n\n    // 更新Redux状态\n    dispatch(addToCart({\n      product,\n      quantity\n    }));\n\n    // 保存到localStorage\n    const state = getState();\n    saveCartToLocalStorage(state.cart.items);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('添加商品到购物车失败:', error);\n    throw error;\n  }\n});\n\n// 异步action：更新购物车商品数量\nexport const updateQuantityAsync = createAsyncThunk('cart/updateQuantityAsync', async ({\n  productId,\n  quantity\n}, {\n  dispatch,\n  getState\n}) => {\n  try {\n    // 调用后端API\n    await CartService.updateCartItemQuantity(MOCK_USER_ID, productId, quantity);\n\n    // 更新Redux状态\n    dispatch(updateQuantity({\n      productId,\n      quantity\n    }));\n\n    // 保存到localStorage\n    const state = getState();\n    saveCartToLocalStorage(state.cart.items);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('更新购物车商品数量失败:', error);\n    throw error;\n  }\n});\n\n// 异步action：从购物车删除商品\nexport const removeFromCartAsync = createAsyncThunk('cart/removeFromCartAsync', async (productId, {\n  dispatch,\n  getState\n}) => {\n  try {\n    // 调用后端API\n    await CartService.removeFromCartByProductId(MOCK_USER_ID, productId);\n\n    // 更新Redux状态\n    dispatch(removeFromCart(productId));\n\n    // 保存到localStorage\n    const state = getState();\n    saveCartToLocalStorage(state.cart.items);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('从购物车删除商品失败:', error);\n    throw error;\n  }\n});\n\n// 异步action：清空购物车\nexport const clearCartAsync = createAsyncThunk('cart/clearCartAsync', async (_, {\n  dispatch\n}) => {\n  try {\n    // 调用后端API\n    await CartService.clearCart(MOCK_USER_ID);\n\n    // 更新Redux状态\n    dispatch(clearCart());\n\n    // 清空localStorage\n    localStorage.removeItem('cartItems');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('清空购物车失败:', error);\n    throw error;\n  }\n});\n\n// 异步action：加载购物车\nexport const loadCartAsync = createAsyncThunk('cart/loadCartAsync', async (_, {\n  dispatch\n}) => {\n  try {\n    // 尝试从localStorage加载\n    const localCartItems = loadCartFromLocalStorage();\n    if (localCartItems.length > 0) {\n      dispatch(setCartItems(localCartItems));\n      return {\n        success: true\n      };\n    }\n\n    // 如果localStorage中没有数据，则调用后端API\n    const cartItems = await CartService.getCartItems(MOCK_USER_ID);\n\n    // 更新Redux状态\n    dispatch(setCartItems(cartItems));\n\n    // 保存到localStorage\n    saveCartToLocalStorage(cartItems);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('加载购物车失败:', error);\n    throw error;\n  }\n});\nconst initialState = {\n  items: [],\n  totalQuantity: 0,\n  totalAmount: 0,\n  isOpen: false,\n  coupon: null,\n  pointsUsed: 0,\n  discountAmount: 0,\n  actualAmount: 0\n};\n\n// 计算购物车总数量和总金额\nconst calculateTotals = items => {\n  let totalQuantity = 0;\n  let totalAmount = 0;\n  items.forEach(item => {\n    totalQuantity += item.quantity;\n    totalAmount += item.product.price * item.quantity;\n  });\n  return {\n    totalQuantity,\n    totalAmount\n  };\n};\n\n// 计算优惠后的实际金额\nconst calculateActualAmount = (totalAmount, coupon, pointsUsed) => {\n  let discountAmount = 0;\n\n  // 计算优惠券折扣\n  if (coupon) {\n    if (totalAmount >= coupon.minAmount) {\n      if (coupon.type === 'DISCOUNT') {\n        // 折扣券，如8折就是0.8\n        discountAmount += totalAmount * (1 - coupon.value / 10);\n      } else if (coupon.type === 'FIXED') {\n        // 满减券\n        discountAmount += coupon.value;\n      }\n    }\n  }\n\n  // 计算积分折扣（假设100积分=1元）\n  const pointsDiscount = pointsUsed / 100;\n  discountAmount += pointsDiscount;\n\n  // 确保折扣不超过总金额\n  discountAmount = Math.min(discountAmount, totalAmount);\n\n  // 计算实际支付金额\n  const actualAmount = totalAmount - discountAmount;\n  return {\n    discountAmount,\n    actualAmount\n  };\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // 设置购物车商品列表\n    setCartItems: (state, action) => {\n      state.items = action.payload;\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n\n      // 重新计算优惠后金额\n      const {\n        discountAmount,\n        actualAmount\n      } = calculateActualAmount(state.totalAmount, state.coupon, state.pointsUsed);\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    // 添加商品到购物车\n    addToCart: (state, action) => {\n      const {\n        product,\n        quantity = 1\n      } = action.payload;\n      const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n      if (existingItemIndex >= 0) {\n        // 如果商品已存在，增加数量\n        state.items[existingItemIndex].quantity += quantity;\n      } else {\n        // 如果商品不存在，添加新项\n        state.items.push({\n          product,\n          quantity\n        });\n      }\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n\n      // 重新计算优惠后金额\n      const {\n        discountAmount,\n        actualAmount\n      } = calculateActualAmount(state.totalAmount, state.coupon, state.pointsUsed);\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    // 从购物车移除商品\n    removeFromCart: (state, action) => {\n      const productId = action.payload;\n      state.items = state.items.filter(item => item.product.id !== productId);\n\n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n\n      // 重新计算优惠后金额\n      const {\n        discountAmount,\n        actualAmount\n      } = calculateActualAmount(state.totalAmount, state.coupon, state.pointsUsed);\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    // 更新商品数量\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const itemIndex = state.items.findIndex(item => item.product.id === productId);\n      if (itemIndex >= 0) {\n        if (quantity <= 0) {\n          // 如果数量为0或负数，移除商品\n          state.items.splice(itemIndex, 1);\n        } else {\n          // 更新数量\n          state.items[itemIndex].quantity = quantity;\n        }\n\n        // 重新计算总计\n        const totals = calculateTotals(state.items);\n        state.totalQuantity = totals.totalQuantity;\n        state.totalAmount = totals.totalAmount;\n\n        // 重新计算优惠后金额\n        const {\n          discountAmount,\n          actualAmount\n        } = calculateActualAmount(state.totalAmount, state.coupon, state.pointsUsed);\n        state.discountAmount = discountAmount;\n        state.actualAmount = actualAmount;\n      }\n    },\n    // 清空购物车\n    clearCart: state => {\n      state.items = [];\n      state.totalQuantity = 0;\n      state.totalAmount = 0;\n      state.coupon = null;\n      state.pointsUsed = 0;\n      state.discountAmount = 0;\n      state.actualAmount = 0;\n    },\n    // 应用优惠券\n    applyCoupon: (state, action) => {\n      state.coupon = action.payload;\n\n      // 重新计算优惠后金额\n      const {\n        discountAmount,\n        actualAmount\n      } = calculateActualAmount(state.totalAmount, state.coupon, state.pointsUsed);\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    // 使用积分\n    applyPoints: (state, action) => {\n      state.pointsUsed = action.payload;\n\n      // 重新计算优惠后金额\n      const {\n        discountAmount,\n        actualAmount\n      } = calculateActualAmount(state.totalAmount, state.coupon, state.pointsUsed);\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    // 打开购物车抽屉\n    openCart: state => {\n      state.isOpen = true;\n    },\n    // 关闭购物车抽屉\n    closeCart: state => {\n      state.isOpen = false;\n    },\n    // 切换购物车抽屉状态\n    toggleCart: state => {\n      state.isOpen = !state.isOpen;\n    }\n  }\n});\nexport const {\n  setCartItems,\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  applyCoupon,\n  applyPoints,\n  openCart,\n  closeCart,\n  toggleCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","CartService","MOCK_USER_ID","saveCartToLocalStorage","items","localStorage","setItem","JSON","stringify","error","console","loadCartFromLocalStorage","cartItemsStr","getItem","parse","addToCartAsync","product","quantity","dispatch","getState","addToCart","id","state","cart","success","updateQuantityAsync","productId","updateCartItemQuantity","updateQuantity","removeFromCartAsync","removeFromCartByProductId","removeFromCart","clearCartAsync","_","clearCart","removeItem","loadCartAsync","localCartItems","length","setCartItems","cartItems","getCartItems","initialState","totalQuantity","totalAmount","isOpen","coupon","pointsUsed","discountAmount","actualAmount","calculateTotals","forEach","item","price","calculateActualAmount","minAmount","type","value","pointsDiscount","Math","min","cartSlice","name","reducers","action","payload","totals","existingItemIndex","findIndex","push","filter","itemIndex","splice","applyCoupon","applyPoints","openCart","closeCart","toggleCart","actions","reducer"],"sources":["D:/luckymall/frontend/src/store/slices/cartSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { CartItem, Product, Coupon } from '../../types';\nimport { CartService } from '../../services/cartService';\n\n// 模拟用户ID\nconst MOCK_USER_ID = 1;\n\n// 保存购物车数据到localStorage\nconst saveCartToLocalStorage = (items: CartItem[]) => {\n  try {\n    localStorage.setItem('cartItems', JSON.stringify(items));\n  } catch (error) {\n    console.error('保存购物车数据到localStorage失败:', error);\n  }\n};\n\n// 从localStorage加载购物车数据\nconst loadCartFromLocalStorage = (): CartItem[] => {\n  try {\n    const cartItemsStr = localStorage.getItem('cartItems');\n    if (cartItemsStr) {\n      return JSON.parse(cartItemsStr);\n    }\n  } catch (error) {\n    console.error('从localStorage加载购物车数据失败:', error);\n  }\n  return [];\n};\n\n// 异步action：添加商品到购物车\nexport const addToCartAsync = createAsyncThunk(\n  'cart/addToCartAsync',\n  async ({ product, quantity }: { product: Product; quantity: number }, { dispatch, getState }) => {\n    try {\n      // 调用后端API\n      await CartService.addToCart(MOCK_USER_ID, product.id, quantity);\n      \n      // 更新Redux状态\n      dispatch(addToCart({ product, quantity }));\n      \n      // 保存到localStorage\n      const state = getState() as { cart: CartState };\n      saveCartToLocalStorage(state.cart.items);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('添加商品到购物车失败:', error);\n      throw error;\n    }\n  }\n);\n\n// 异步action：更新购物车商品数量\nexport const updateQuantityAsync = createAsyncThunk(\n  'cart/updateQuantityAsync',\n  async ({ productId, quantity }: { productId: number; quantity: number }, { dispatch, getState }) => {\n    try {\n      // 调用后端API\n      await CartService.updateCartItemQuantity(MOCK_USER_ID, productId, quantity);\n      \n      // 更新Redux状态\n      dispatch(updateQuantity({ productId, quantity }));\n      \n      // 保存到localStorage\n      const state = getState() as { cart: CartState };\n      saveCartToLocalStorage(state.cart.items);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('更新购物车商品数量失败:', error);\n      throw error;\n    }\n  }\n);\n\n// 异步action：从购物车删除商品\nexport const removeFromCartAsync = createAsyncThunk(\n  'cart/removeFromCartAsync',\n  async (productId: number, { dispatch, getState }) => {\n    try {\n      // 调用后端API\n      await CartService.removeFromCartByProductId(MOCK_USER_ID, productId);\n      \n      // 更新Redux状态\n      dispatch(removeFromCart(productId));\n      \n      // 保存到localStorage\n      const state = getState() as { cart: CartState };\n      saveCartToLocalStorage(state.cart.items);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('从购物车删除商品失败:', error);\n      throw error;\n    }\n  }\n);\n\n// 异步action：清空购物车\nexport const clearCartAsync = createAsyncThunk(\n  'cart/clearCartAsync',\n  async (_, { dispatch }) => {\n    try {\n      // 调用后端API\n      await CartService.clearCart(MOCK_USER_ID);\n      \n      // 更新Redux状态\n      dispatch(clearCart());\n      \n      // 清空localStorage\n      localStorage.removeItem('cartItems');\n      \n      return { success: true };\n    } catch (error) {\n      console.error('清空购物车失败:', error);\n      throw error;\n    }\n  }\n);\n\n// 异步action：加载购物车\nexport const loadCartAsync = createAsyncThunk(\n  'cart/loadCartAsync',\n  async (_, { dispatch }) => {\n    try {\n      // 尝试从localStorage加载\n      const localCartItems = loadCartFromLocalStorage();\n      if (localCartItems.length > 0) {\n        dispatch(setCartItems(localCartItems));\n        return { success: true };\n      }\n      \n      // 如果localStorage中没有数据，则调用后端API\n      const cartItems = await CartService.getCartItems(MOCK_USER_ID);\n      \n      // 更新Redux状态\n      dispatch(setCartItems(cartItems));\n      \n      // 保存到localStorage\n      saveCartToLocalStorage(cartItems);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('加载购物车失败:', error);\n      throw error;\n    }\n  }\n);\n\ninterface CartState {\n  items: CartItem[];\n  totalQuantity: number;\n  totalAmount: number;\n  isOpen: boolean; // 购物车抽屉是否打开\n  coupon: Coupon | null; // 已选择的优惠券\n  pointsUsed: number; // 使用的积分\n  discountAmount: number; // 优惠金额\n  actualAmount: number; // 实际支付金额\n}\n\nconst initialState: CartState = {\n  items: [],\n  totalQuantity: 0,\n  totalAmount: 0,\n  isOpen: false,\n  coupon: null,\n  pointsUsed: 0,\n  discountAmount: 0,\n  actualAmount: 0,\n};\n\n// 计算购物车总数量和总金额\nconst calculateTotals = (items: CartItem[]) => {\n  let totalQuantity = 0;\n  let totalAmount = 0;\n  \n  items.forEach(item => {\n    totalQuantity += item.quantity;\n    totalAmount += item.product.price * item.quantity;\n  });\n  \n  return { totalQuantity, totalAmount };\n};\n\n// 计算优惠后的实际金额\nconst calculateActualAmount = (totalAmount: number, coupon: Coupon | null, pointsUsed: number) => {\n  let discountAmount = 0;\n  \n  // 计算优惠券折扣\n  if (coupon) {\n    if (totalAmount >= coupon.minAmount) {\n      if (coupon.type === 'DISCOUNT') {\n        // 折扣券，如8折就是0.8\n        discountAmount += totalAmount * (1 - coupon.value / 10);\n      } else if (coupon.type === 'FIXED') {\n        // 满减券\n        discountAmount += coupon.value;\n      }\n    }\n  }\n  \n  // 计算积分折扣（假设100积分=1元）\n  const pointsDiscount = pointsUsed / 100;\n  discountAmount += pointsDiscount;\n  \n  // 确保折扣不超过总金额\n  discountAmount = Math.min(discountAmount, totalAmount);\n  \n  // 计算实际支付金额\n  const actualAmount = totalAmount - discountAmount;\n  \n  return { discountAmount, actualAmount };\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // 设置购物车商品列表\n    setCartItems: (state, action: PayloadAction<CartItem[]>) => {\n      state.items = action.payload;\n      \n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n      \n      // 重新计算优惠后金额\n      const { discountAmount, actualAmount } = calculateActualAmount(\n        state.totalAmount, \n        state.coupon, \n        state.pointsUsed\n      );\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    \n    // 添加商品到购物车\n    addToCart: (state, action: PayloadAction<{ product: Product; quantity?: number }>) => {\n      const { product, quantity = 1 } = action.payload;\n      const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n      \n      if (existingItemIndex >= 0) {\n        // 如果商品已存在，增加数量\n        state.items[existingItemIndex].quantity += quantity;\n      } else {\n        // 如果商品不存在，添加新项\n        state.items.push({ product, quantity });\n      }\n      \n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n      \n      // 重新计算优惠后金额\n      const { discountAmount, actualAmount } = calculateActualAmount(\n        state.totalAmount, \n        state.coupon, \n        state.pointsUsed\n      );\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    \n    // 从购物车移除商品\n    removeFromCart: (state, action: PayloadAction<number>) => {\n      const productId = action.payload;\n      state.items = state.items.filter(item => item.product.id !== productId);\n      \n      // 重新计算总计\n      const totals = calculateTotals(state.items);\n      state.totalQuantity = totals.totalQuantity;\n      state.totalAmount = totals.totalAmount;\n      \n      // 重新计算优惠后金额\n      const { discountAmount, actualAmount } = calculateActualAmount(\n        state.totalAmount, \n        state.coupon, \n        state.pointsUsed\n      );\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    \n    // 更新商品数量\n    updateQuantity: (state, action: PayloadAction<{ productId: number; quantity: number }>) => {\n      const { productId, quantity } = action.payload;\n      const itemIndex = state.items.findIndex(item => item.product.id === productId);\n      \n      if (itemIndex >= 0) {\n        if (quantity <= 0) {\n          // 如果数量为0或负数，移除商品\n          state.items.splice(itemIndex, 1);\n        } else {\n          // 更新数量\n          state.items[itemIndex].quantity = quantity;\n        }\n        \n        // 重新计算总计\n        const totals = calculateTotals(state.items);\n        state.totalQuantity = totals.totalQuantity;\n        state.totalAmount = totals.totalAmount;\n        \n        // 重新计算优惠后金额\n        const { discountAmount, actualAmount } = calculateActualAmount(\n          state.totalAmount, \n          state.coupon, \n          state.pointsUsed\n        );\n        state.discountAmount = discountAmount;\n        state.actualAmount = actualAmount;\n      }\n    },\n    \n    // 清空购物车\n    clearCart: (state) => {\n      state.items = [];\n      state.totalQuantity = 0;\n      state.totalAmount = 0;\n      state.coupon = null;\n      state.pointsUsed = 0;\n      state.discountAmount = 0;\n      state.actualAmount = 0;\n    },\n    \n    // 应用优惠券\n    applyCoupon: (state, action: PayloadAction<Coupon | null>) => {\n      state.coupon = action.payload;\n      \n      // 重新计算优惠后金额\n      const { discountAmount, actualAmount } = calculateActualAmount(\n        state.totalAmount, \n        state.coupon, \n        state.pointsUsed\n      );\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    \n    // 使用积分\n    applyPoints: (state, action: PayloadAction<number>) => {\n      state.pointsUsed = action.payload;\n      \n      // 重新计算优惠后金额\n      const { discountAmount, actualAmount } = calculateActualAmount(\n        state.totalAmount, \n        state.coupon, \n        state.pointsUsed\n      );\n      state.discountAmount = discountAmount;\n      state.actualAmount = actualAmount;\n    },\n    \n    // 打开购物车抽屉\n    openCart: (state) => {\n      state.isOpen = true;\n    },\n    \n    // 关闭购物车抽屉\n    closeCart: (state) => {\n      state.isOpen = false;\n    },\n    \n    // 切换购物车抽屉状态\n    toggleCart: (state) => {\n      state.isOpen = !state.isOpen;\n    },\n  },\n});\n\nexport const {\n  setCartItems,\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  applyCoupon,\n  applyPoints,\n  openCart,\n  closeCart,\n  toggleCart,\n} = cartSlice.actions;\n\nexport default cartSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}