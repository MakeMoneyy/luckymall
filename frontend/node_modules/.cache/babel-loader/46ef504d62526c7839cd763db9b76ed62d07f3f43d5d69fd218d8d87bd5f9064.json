{"ast":null,"code":"import api from './api';\n/**\n * 购物车服务类\n */\nexport class CartService {\n  /**\n   * 获取用户购物车商品列表\n   */\n  static async getCartItems(userId) {\n    try {\n      const response = await api.get(`/api/cart/${userId}`);\n      return response.data.data;\n    } catch (error) {\n      console.error('获取购物车列表失败，使用模拟数据:', error);\n\n      // 从localStorage获取购物车数据\n      const cartItemsStr = localStorage.getItem('cartItems');\n      if (cartItemsStr) {\n        return JSON.parse(cartItemsStr);\n      }\n\n      // 如果localStorage中没有数据，返回空数组\n      return [];\n    }\n  }\n\n  /**\n   * 添加商品到购物车\n   */\n  static async addToCart(userId, productId, quantity) {\n    try {\n      const response = await api.post(`/api/cart/${userId}/add`, {\n        productId,\n        quantity\n      });\n      return response.data.message;\n    } catch (error) {\n      console.error('添加商品到购物车失败，使用模拟数据:', error);\n\n      // 模拟成功响应\n      return `商品已添加到购物车`;\n    }\n  }\n\n  /**\n   * 更新购物车商品数量\n   */\n  static async updateCartItemQuantity(userId, productId, quantity) {\n    try {\n      const response = await api.put(`/api/cart/${userId}/update`, {\n        productId,\n        quantity\n      });\n      return response.data.message;\n    } catch (error) {\n      console.error('更新购物车数量失败，使用模拟数据:', error);\n\n      // 模拟成功响应\n      return `购物车商品数量已更新`;\n    }\n  }\n\n  /**\n   * 从购物车删除商品\n   */\n  static async removeFromCart(userId, cartItemId) {\n    try {\n      const response = await api.delete(`/api/cart/${userId}/remove/${cartItemId}`);\n      return response.data.message;\n    } catch (error) {\n      console.error('从购物车删除商品失败，使用模拟数据:', error);\n\n      // 模拟成功响应\n      return `商品已从购物车中移除`;\n    }\n  }\n\n  /**\n   * 根据商品ID从购物车删除商品\n   */\n  static async removeFromCartByProductId(userId, productId) {\n    try {\n      const response = await api.delete(`/api/cart/${userId}/remove-product/${productId}`);\n      return response.data.message;\n    } catch (error) {\n      console.error('从购物车删除商品失败，使用模拟数据:', error);\n\n      // 模拟成功响应\n      return `商品已从购物车中移除`;\n    }\n  }\n\n  /**\n   * 清空用户购物车\n   */\n  static async clearCart(userId) {\n    try {\n      const response = await api.delete(`/api/cart/${userId}/clear`);\n      return response.data.message;\n    } catch (error) {\n      console.error('清空购物车失败，使用模拟数据:', error);\n\n      // 模拟成功响应\n      return `购物车已清空`;\n    }\n  }\n\n  /**\n   * 获取用户购物车商品数量\n   */\n  static async getCartItemCount(userId) {\n    try {\n      const response = await api.get(`/api/cart/${userId}/count`);\n      return response.data.data;\n    } catch (error) {\n      console.error('获取购物车商品数量失败，使用模拟数据:', error);\n\n      // 从localStorage获取购物车数据\n      const cartItemsStr = localStorage.getItem('cartItems');\n      if (cartItemsStr) {\n        const cartItems = JSON.parse(cartItemsStr);\n        return cartItems.reduce((total, item) => total + item.quantity, 0);\n      }\n\n      // 如果localStorage中没有数据，返回0\n      return 0;\n    }\n  }\n}","map":{"version":3,"names":["api","CartService","getCartItems","userId","response","get","data","error","console","cartItemsStr","localStorage","getItem","JSON","parse","addToCart","productId","quantity","post","message","updateCartItemQuantity","put","removeFromCart","cartItemId","delete","removeFromCartByProductId","clearCart","getCartItemCount","cartItems","reduce","total","item"],"sources":["D:/luckymall/frontend/src/services/cartService.ts"],"sourcesContent":["import api from './api';\nimport { ApiResponse, CartItem, Product } from '../types';\n\n/**\n * 购物车服务类\n */\nexport class CartService {\n  /**\n   * 获取用户购物车商品列表\n   */\n  static async getCartItems(userId: number): Promise<CartItem[]> {\n    try {\n      const response = await api.get<ApiResponse<CartItem[]>>(`/api/cart/${userId}`);\n      return response.data.data;\n    } catch (error) {\n      console.error('获取购物车列表失败，使用模拟数据:', error);\n      \n      // 从localStorage获取购物车数据\n      const cartItemsStr = localStorage.getItem('cartItems');\n      if (cartItemsStr) {\n        return JSON.parse(cartItemsStr);\n      }\n      \n      // 如果localStorage中没有数据，返回空数组\n      return [];\n    }\n  }\n\n  /**\n   * 添加商品到购物车\n   */\n  static async addToCart(userId: number, productId: number, quantity: number): Promise<string> {\n    try {\n      const response = await api.post<ApiResponse<string>>(`/api/cart/${userId}/add`, {\n        productId,\n        quantity\n      });\n      return response.data.message;\n    } catch (error) {\n      console.error('添加商品到购物车失败，使用模拟数据:', error);\n      \n      // 模拟成功响应\n      return `商品已添加到购物车`;\n    }\n  }\n\n  /**\n   * 更新购物车商品数量\n   */\n  static async updateCartItemQuantity(userId: number, productId: number, quantity: number): Promise<string> {\n    try {\n      const response = await api.put<ApiResponse<string>>(`/api/cart/${userId}/update`, {\n        productId,\n        quantity\n      });\n      return response.data.message;\n    } catch (error) {\n      console.error('更新购物车数量失败，使用模拟数据:', error);\n      \n      // 模拟成功响应\n      return `购物车商品数量已更新`;\n    }\n  }\n\n  /**\n   * 从购物车删除商品\n   */\n  static async removeFromCart(userId: number, cartItemId: number): Promise<string> {\n    try {\n      const response = await api.delete<ApiResponse<string>>(`/api/cart/${userId}/remove/${cartItemId}`);\n      return response.data.message;\n    } catch (error) {\n      console.error('从购物车删除商品失败，使用模拟数据:', error);\n      \n      // 模拟成功响应\n      return `商品已从购物车中移除`;\n    }\n  }\n\n  /**\n   * 根据商品ID从购物车删除商品\n   */\n  static async removeFromCartByProductId(userId: number, productId: number): Promise<string> {\n    try {\n      const response = await api.delete<ApiResponse<string>>(`/api/cart/${userId}/remove-product/${productId}`);\n      return response.data.message;\n    } catch (error) {\n      console.error('从购物车删除商品失败，使用模拟数据:', error);\n      \n      // 模拟成功响应\n      return `商品已从购物车中移除`;\n    }\n  }\n\n  /**\n   * 清空用户购物车\n   */\n  static async clearCart(userId: number): Promise<string> {\n    try {\n      const response = await api.delete<ApiResponse<string>>(`/api/cart/${userId}/clear`);\n      return response.data.message;\n    } catch (error) {\n      console.error('清空购物车失败，使用模拟数据:', error);\n      \n      // 模拟成功响应\n      return `购物车已清空`;\n    }\n  }\n\n  /**\n   * 获取用户购物车商品数量\n   */\n  static async getCartItemCount(userId: number): Promise<number> {\n    try {\n      const response = await api.get<ApiResponse<number>>(`/api/cart/${userId}/count`);\n      return response.data.data;\n    } catch (error) {\n      console.error('获取购物车商品数量失败，使用模拟数据:', error);\n      \n      // 从localStorage获取购物车数据\n      const cartItemsStr = localStorage.getItem('cartItems');\n      if (cartItemsStr) {\n        const cartItems = JSON.parse(cartItemsStr);\n        return cartItems.reduce((total: number, item: CartItem) => total + item.quantity, 0);\n      }\n      \n      // 如果localStorage中没有数据，返回0\n      return 0;\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}