{"ast":null,"code":"import api from './api';\n\n/**\r\n * 订单请求参数\r\n */\n\n/**\r\n * 订单响应\r\n */\n\n/**\r\n * 订单服务类\r\n */\nexport class OrderService {\n  /**\r\n   * 创建订单\r\n   */\n  static async createOrder(userId, request) {\n    try {\n      // 尝试调用真实API\n      const response = await api.post(`/api/orders/${userId}`, request);\n      return response.data.data;\n    } catch (error) {\n      console.error('调用订单API失败，使用模拟数据:', error);\n\n      // 模拟响应\n      return {\n        orderId: Math.floor(Math.random() * 1000000),\n        orderNo: `ORD${Date.now()}`,\n        totalAmount: request.expectedAmount,\n        actualAmount: request.expectedAmount - (request.pointsUsed ? request.pointsUsed / 100 : 0),\n        isInstallment: !!request.installmentPlanId,\n        installmentCount: request.installmentPlanId ? request.installmentPlanId === 1 ? 3 : request.installmentPlanId === 2 ? 6 : request.installmentPlanId === 3 ? 12 : request.installmentPlanId === 4 ? 24 : 36 : undefined,\n        monthlyAmount: request.installmentPlanId ? request.expectedAmount / (request.installmentPlanId === 1 ? 3 : request.installmentPlanId === 2 ? 6 : request.installmentPlanId === 3 ? 12 : request.installmentPlanId === 4 ? 24 : 36) : undefined,\n        paymentMethod: request.paymentMethod,\n        receiverAddress: '模拟地址'\n      };\n    }\n  }\n\n  /**\r\n   * 根据ID查询订单\r\n   */\n  static async getOrderById(orderId) {\n    const response = await api.get(`/api/orders/${orderId}`);\n    return response.data.data;\n  }\n\n  /**\r\n   * 根据订单号查询订单\r\n   */\n  static async getOrderByOrderNo(orderNo) {\n    const response = await api.get(`/api/orders/no/${orderNo}`);\n    return response.data.data;\n  }\n\n  /**\r\n   * 根据用户ID查询订单列表\r\n   */\n  static async getOrdersByUserId(userId) {\n    const response = await api.get(`/api/orders/user/${userId}`);\n    return response.data.data;\n  }\n\n  /**\r\n   * 根据用户ID和状态查询订单列表\r\n   */\n  static async getOrdersByUserIdAndStatus(userId, orderStatus) {\n    const response = await api.get(`/api/orders/user/${userId}/status/${orderStatus}`);\n    return response.data.data;\n  }\n\n  /**\r\n   * 取消订单\r\n   */\n  static async cancelOrder(orderId, userId) {\n    const response = await api.post(`/api/orders/${orderId}/cancel`, null, {\n      params: {\n        userId\n      }\n    });\n    return response.data.message;\n  }\n\n  /**\r\n   * 确认收货\r\n   */\n  static async confirmReceive(orderId, userId) {\n    const response = await api.post(`/api/orders/${orderId}/confirm`, null, {\n      params: {\n        userId\n      }\n    });\n    return response.data.message;\n  }\n\n  /**\r\n   * 支付订单\r\n   */\n  static async payOrder(orderId, userId) {\n    const response = await api.post(`/api/orders/${orderId}/pay`, null, {\n      params: {\n        userId\n      }\n    });\n    return response.data.message;\n  }\n}","map":{"version":3,"names":["api","OrderService","createOrder","userId","request","response","post","data","error","console","orderId","Math","floor","random","orderNo","Date","now","totalAmount","expectedAmount","actualAmount","pointsUsed","isInstallment","installmentPlanId","installmentCount","undefined","monthlyAmount","paymentMethod","receiverAddress","getOrderById","get","getOrderByOrderNo","getOrdersByUserId","getOrdersByUserIdAndStatus","orderStatus","cancelOrder","params","message","confirmReceive","payOrder"],"sources":["D:/luckymall/frontend/src/services/orderService.ts"],"sourcesContent":["import api from './api';\r\nimport { ApiResponse, Order } from '../types';\r\n\r\n/**\r\n * 订单请求参数\r\n */\r\nexport interface CreateOrderRequest {\r\n  cartItemIds: number[];\r\n  addressId: number;\r\n  paymentMethod: string;\r\n  creditCardId?: number;\r\n  installmentPlanId?: number;\r\n  couponId?: number;\r\n  pointsUsed?: number;\r\n  expectedAmount: number;\r\n  remark?: string;\r\n}\r\n\r\n/**\r\n * 订单响应\r\n */\r\nexport interface CreateOrderResponse {\r\n  orderId: number;\r\n  orderNo: string;\r\n  totalAmount: number;\r\n  actualAmount: number;\r\n  isInstallment: boolean;\r\n  installmentCount?: number;\r\n  monthlyAmount?: number;\r\n  paymentMethod: string;\r\n  receiverAddress: string;\r\n}\r\n\r\n/**\r\n * 订单服务类\r\n */\r\nexport class OrderService {\r\n  /**\r\n   * 创建订单\r\n   */\r\n  static async createOrder(userId: number, request: CreateOrderRequest): Promise<CreateOrderResponse> {\r\n    try {\r\n      // 尝试调用真实API\r\n      const response = await api.post<ApiResponse<CreateOrderResponse>>(`/api/orders/${userId}`, request);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      console.error('调用订单API失败，使用模拟数据:', error);\r\n      \r\n      // 模拟响应\r\n      return {\r\n        orderId: Math.floor(Math.random() * 1000000),\r\n        orderNo: `ORD${Date.now()}`,\r\n        totalAmount: request.expectedAmount,\r\n        actualAmount: request.expectedAmount - (request.pointsUsed ? request.pointsUsed / 100 : 0),\r\n        isInstallment: !!request.installmentPlanId,\r\n        installmentCount: request.installmentPlanId ? (request.installmentPlanId === 1 ? 3 : \r\n                                                     request.installmentPlanId === 2 ? 6 : \r\n                                                     request.installmentPlanId === 3 ? 12 : \r\n                                                     request.installmentPlanId === 4 ? 24 : 36) : undefined,\r\n        monthlyAmount: request.installmentPlanId ? \r\n                       (request.expectedAmount / (request.installmentPlanId === 1 ? 3 : \r\n                                                request.installmentPlanId === 2 ? 6 : \r\n                                                request.installmentPlanId === 3 ? 12 : \r\n                                                request.installmentPlanId === 4 ? 24 : 36)) : undefined,\r\n        paymentMethod: request.paymentMethod,\r\n        receiverAddress: '模拟地址'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据ID查询订单\r\n   */\r\n  static async getOrderById(orderId: number): Promise<Order> {\r\n    const response = await api.get<ApiResponse<Order>>(`/api/orders/${orderId}`);\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * 根据订单号查询订单\r\n   */\r\n  static async getOrderByOrderNo(orderNo: string): Promise<Order> {\r\n    const response = await api.get<ApiResponse<Order>>(`/api/orders/no/${orderNo}`);\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * 根据用户ID查询订单列表\r\n   */\r\n  static async getOrdersByUserId(userId: number): Promise<Order[]> {\r\n    const response = await api.get<ApiResponse<Order[]>>(`/api/orders/user/${userId}`);\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * 根据用户ID和状态查询订单列表\r\n   */\r\n  static async getOrdersByUserIdAndStatus(userId: number, orderStatus: string): Promise<Order[]> {\r\n    const response = await api.get<ApiResponse<Order[]>>(`/api/orders/user/${userId}/status/${orderStatus}`);\r\n    return response.data.data;\r\n  }\r\n\r\n  /**\r\n   * 取消订单\r\n   */\r\n  static async cancelOrder(orderId: number, userId: number): Promise<string> {\r\n    const response = await api.post<ApiResponse<string>>(`/api/orders/${orderId}/cancel`, null, {\r\n      params: { userId }\r\n    });\r\n    return response.data.message;\r\n  }\r\n\r\n  /**\r\n   * 确认收货\r\n   */\r\n  static async confirmReceive(orderId: number, userId: number): Promise<string> {\r\n    const response = await api.post<ApiResponse<string>>(`/api/orders/${orderId}/confirm`, null, {\r\n      params: { userId }\r\n    });\r\n    return response.data.message;\r\n  }\r\n\r\n  /**\r\n   * 支付订单\r\n   */\r\n  static async payOrder(orderId: number, userId: number): Promise<string> {\r\n    const response = await api.post<ApiResponse<string>>(`/api/orders/${orderId}/pay`, null, {\r\n      params: { userId }\r\n    });\r\n    return response.data.message;\r\n  }\r\n} "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAGvB;AACA;AACA;;AAaA;AACA;AACA;;AAaA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,CAAC;EACxB;AACF;AACA;EACE,aAAaC,WAAWA,CAACC,MAAc,EAAEC,OAA2B,EAAgC;IAClG,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAmC,eAAeH,MAAM,EAAE,EAAEC,OAAO,CAAC;MACnG,OAAOC,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;;MAEzC;MACA,OAAO;QACLE,OAAO,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC;QAC5CC,OAAO,EAAE,MAAMC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC3BC,WAAW,EAAEb,OAAO,CAACc,cAAc;QACnCC,YAAY,EAAEf,OAAO,CAACc,cAAc,IAAId,OAAO,CAACgB,UAAU,GAAGhB,OAAO,CAACgB,UAAU,GAAG,GAAG,GAAG,CAAC,CAAC;QAC1FC,aAAa,EAAE,CAAC,CAACjB,OAAO,CAACkB,iBAAiB;QAC1CC,gBAAgB,EAAEnB,OAAO,CAACkB,iBAAiB,GAAIlB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,CAAC,GACrClB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,CAAC,GACnClB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,EAAE,GACpClB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAIE,SAAS;QACnGC,aAAa,EAAErB,OAAO,CAACkB,iBAAiB,GACxBlB,OAAO,CAACc,cAAc,IAAId,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,CAAC,GACrClB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,CAAC,GACnClB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,EAAE,GACpClB,OAAO,CAACkB,iBAAiB,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAIE,SAAS;QAC/FE,aAAa,EAAEtB,OAAO,CAACsB,aAAa;QACpCC,eAAe,EAAE;MACnB,CAAC;IACH;EACF;;EAEA;AACF;AACA;EACE,aAAaC,YAAYA,CAAClB,OAAe,EAAkB;IACzD,MAAML,QAAQ,GAAG,MAAML,GAAG,CAAC6B,GAAG,CAAqB,eAAenB,OAAO,EAAE,CAAC;IAC5E,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAauB,iBAAiBA,CAAChB,OAAe,EAAkB;IAC9D,MAAMT,QAAQ,GAAG,MAAML,GAAG,CAAC6B,GAAG,CAAqB,kBAAkBf,OAAO,EAAE,CAAC;IAC/E,OAAOT,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAawB,iBAAiBA,CAAC5B,MAAc,EAAoB;IAC/D,MAAME,QAAQ,GAAG,MAAML,GAAG,CAAC6B,GAAG,CAAuB,oBAAoB1B,MAAM,EAAE,CAAC;IAClF,OAAOE,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAayB,0BAA0BA,CAAC7B,MAAc,EAAE8B,WAAmB,EAAoB;IAC7F,MAAM5B,QAAQ,GAAG,MAAML,GAAG,CAAC6B,GAAG,CAAuB,oBAAoB1B,MAAM,WAAW8B,WAAW,EAAE,CAAC;IACxG,OAAO5B,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;;EAEA;AACF;AACA;EACE,aAAa2B,WAAWA,CAACxB,OAAe,EAAEP,MAAc,EAAmB;IACzE,MAAME,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAsB,eAAeI,OAAO,SAAS,EAAE,IAAI,EAAE;MAC1FyB,MAAM,EAAE;QAAEhC;MAAO;IACnB,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI,CAAC6B,OAAO;EAC9B;;EAEA;AACF;AACA;EACE,aAAaC,cAAcA,CAAC3B,OAAe,EAAEP,MAAc,EAAmB;IAC5E,MAAME,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAsB,eAAeI,OAAO,UAAU,EAAE,IAAI,EAAE;MAC3FyB,MAAM,EAAE;QAAEhC;MAAO;IACnB,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI,CAAC6B,OAAO;EAC9B;;EAEA;AACF;AACA;EACE,aAAaE,QAAQA,CAAC5B,OAAe,EAAEP,MAAc,EAAmB;IACtE,MAAME,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAI,CAAsB,eAAeI,OAAO,MAAM,EAAE,IAAI,EAAE;MACvFyB,MAAM,EAAE;QAAEhC;MAAO;IACnB,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI,CAAC6B,OAAO;EAC9B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}