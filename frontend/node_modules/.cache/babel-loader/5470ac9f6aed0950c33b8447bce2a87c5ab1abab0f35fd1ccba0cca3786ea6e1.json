{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { ProductService } from '../../services/productService';\n\n// 异步action：获取所有分类\nexport const fetchAllCategories = createAsyncThunk('categories/fetchAllCategories', async () => {\n  const response = await ProductService.getAllCategories();\n  return response;\n});\n\n// 异步action：获取顶级分类\nexport const fetchTopCategories = createAsyncThunk('categories/fetchTopCategories', async () => {\n  const response = await ProductService.getTopCategories();\n  return response;\n});\n\n// 异步action：根据父分类ID获取子分类\nexport const fetchCategoriesByParentId = createAsyncThunk('categories/fetchCategoriesByParentId', async parentId => {\n  const response = await ProductService.getCategoriesByParentId(parentId);\n  return {\n    parentId,\n    categories: response\n  };\n});\nconst initialState = {\n  allCategories: [],\n  topCategories: [],\n  subCategories: {},\n  loading: false,\n  error: null,\n  selectedCategoryId: null\n};\nconst categorySlice = createSlice({\n  name: 'categories',\n  initialState,\n  reducers: {\n    // 设置选中的分类\n    setSelectedCategory: (state, action) => {\n      state.selectedCategoryId = action.payload;\n    },\n    // 清除选中的分类\n    clearSelectedCategory: state => {\n      state.selectedCategoryId = null;\n    }\n  },\n  extraReducers: builder => {\n    // 获取所有分类\n    builder.addCase(fetchAllCategories.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchAllCategories.fulfilled, (state, action) => {\n      state.loading = false;\n      state.allCategories = action.payload;\n    }).addCase(fetchAllCategories.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '获取分类失败';\n    });\n\n    // 获取顶级分类\n    builder.addCase(fetchTopCategories.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchTopCategories.fulfilled, (state, action) => {\n      state.loading = false;\n      state.topCategories = action.payload;\n    }).addCase(fetchTopCategories.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || '获取顶级分类失败';\n    });\n\n    // 获取子分类\n    builder.addCase(fetchCategoriesByParentId.fulfilled, (state, action) => {\n      const {\n        parentId,\n        categories\n      } = action.payload;\n      state.subCategories[parentId] = categories;\n    });\n  }\n});\nexport const {\n  setSelectedCategory,\n  clearSelectedCategory\n} = categorySlice.actions;\nexport default categorySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","ProductService","fetchAllCategories","response","getAllCategories","fetchTopCategories","getTopCategories","fetchCategoriesByParentId","parentId","getCategoriesByParentId","categories","initialState","allCategories","topCategories","subCategories","loading","error","selectedCategoryId","categorySlice","name","reducers","setSelectedCategory","state","action","payload","clearSelectedCategory","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["D:/luckymall/frontend/src/store/slices/categorySlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { Category } from '../../types';\r\nimport { ProductService } from '../../services/productService';\r\n\r\n// 异步action：获取所有分类\r\nexport const fetchAllCategories = createAsyncThunk(\r\n  'categories/fetchAllCategories',\r\n  async () => {\r\n    const response = await ProductService.getAllCategories();\r\n    return response;\r\n  }\r\n);\r\n\r\n// 异步action：获取顶级分类\r\nexport const fetchTopCategories = createAsyncThunk(\r\n  'categories/fetchTopCategories',\r\n  async () => {\r\n    const response = await ProductService.getTopCategories();\r\n    return response;\r\n  }\r\n);\r\n\r\n// 异步action：根据父分类ID获取子分类\r\nexport const fetchCategoriesByParentId = createAsyncThunk(\r\n  'categories/fetchCategoriesByParentId',\r\n  async (parentId: number) => {\r\n    const response = await ProductService.getCategoriesByParentId(parentId);\r\n    return { parentId, categories: response };\r\n  }\r\n);\r\n\r\ninterface CategoryState {\r\n  // 所有分类\r\n  allCategories: Category[];\r\n  \r\n  // 顶级分类\r\n  topCategories: Category[];\r\n  \r\n  // 子分类映射 {parentId: Category[]}\r\n  subCategories: Record<number, Category[]>;\r\n  \r\n  // 加载状态\r\n  loading: boolean;\r\n  error: string | null;\r\n  \r\n  // 当前选中的分类\r\n  selectedCategoryId: number | null;\r\n}\r\n\r\nconst initialState: CategoryState = {\r\n  allCategories: [],\r\n  topCategories: [],\r\n  subCategories: {},\r\n  loading: false,\r\n  error: null,\r\n  selectedCategoryId: null,\r\n};\r\n\r\nconst categorySlice = createSlice({\r\n  name: 'categories',\r\n  initialState,\r\n  reducers: {\r\n    // 设置选中的分类\r\n    setSelectedCategory: (state, action) => {\r\n      state.selectedCategoryId = action.payload;\r\n    },\r\n    \r\n    // 清除选中的分类\r\n    clearSelectedCategory: (state) => {\r\n      state.selectedCategoryId = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // 获取所有分类\r\n    builder\r\n      .addCase(fetchAllCategories.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchAllCategories.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.allCategories = action.payload;\r\n      })\r\n      .addCase(fetchAllCategories.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '获取分类失败';\r\n      });\r\n    \r\n    // 获取顶级分类\r\n    builder\r\n      .addCase(fetchTopCategories.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchTopCategories.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.topCategories = action.payload;\r\n      })\r\n      .addCase(fetchTopCategories.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || '获取顶级分类失败';\r\n      });\r\n    \r\n    // 获取子分类\r\n    builder\r\n      .addCase(fetchCategoriesByParentId.fulfilled, (state, action) => {\r\n        const { parentId, categories } = action.payload;\r\n        state.subCategories[parentId] = categories;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { \r\n  setSelectedCategory, \r\n  clearSelectedCategory \r\n} = categorySlice.actions;\r\n\r\nexport default categorySlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}