{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  currentUser: null,\n  isLoggedIn: false,\n  loginModalVisible: false,\n  registerModalVisible: false,\n  loading: false,\n  error: null\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    // 设置当前用户（模拟登录）\n    setCurrentUser: (state, action) => {\n      state.currentUser = action.payload;\n      state.isLoggedIn = true;\n      state.loginModalVisible = false;\n      state.error = null;\n    },\n    // 清除当前用户（登出）\n    clearCurrentUser: state => {\n      state.currentUser = null;\n      state.isLoggedIn = false;\n    },\n    // 显示登录模态框\n    showLoginModal: state => {\n      state.loginModalVisible = true;\n      state.registerModalVisible = false;\n    },\n    // 隐藏登录模态框\n    hideLoginModal: state => {\n      state.loginModalVisible = false;\n      state.error = null;\n    },\n    // 显示注册模态框\n    showRegisterModal: state => {\n      state.registerModalVisible = true;\n      state.loginModalVisible = false;\n    },\n    // 隐藏注册模态框\n    hideRegisterModal: state => {\n      state.registerModalVisible = false;\n      state.error = null;\n    },\n    // 设置加载状态\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    // 设置错误信息\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    // 清除错误信息\n    clearError: state => {\n      state.error = null;\n    },\n    // 模拟登录\n    mockLogin: (state, action) => {\n      const {\n        username\n      } = action.payload;\n\n      // 模拟用户数据\n      const mockUser = {\n        id: 1,\n        username,\n        email: `${username}@example.com`,\n        phone: '13800138000',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      state.currentUser = mockUser;\n      state.isLoggedIn = true;\n      state.loginModalVisible = false;\n      state.error = null;\n    },\n    // 模拟注册\n    mockRegister: (state, action) => {\n      const {\n        username,\n        email,\n        phone\n      } = action.payload;\n\n      // 模拟用户数据\n      const mockUser = {\n        id: Date.now(),\n        // 使用时间戳作为模拟ID\n        username,\n        email,\n        phone,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      state.currentUser = mockUser;\n      state.isLoggedIn = true;\n      state.registerModalVisible = false;\n      state.error = null;\n    }\n  }\n});\nexport const {\n  setCurrentUser,\n  clearCurrentUser,\n  showLoginModal,\n  hideLoginModal,\n  showRegisterModal,\n  hideRegisterModal,\n  setLoading,\n  setError,\n  clearError,\n  mockLogin,\n  mockRegister\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentUser","isLoggedIn","loginModalVisible","registerModalVisible","loading","error","userSlice","name","reducers","setCurrentUser","state","action","payload","clearCurrentUser","showLoginModal","hideLoginModal","showRegisterModal","hideRegisterModal","setLoading","setError","clearError","mockLogin","username","mockUser","id","email","phone","createdAt","Date","toISOString","updatedAt","mockRegister","now","actions","reducer"],"sources":["D:/luckymall/frontend/src/store/slices/userSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { User } from '../../types';\r\n\r\ninterface UserState {\r\n  currentUser: User | null;\r\n  isLoggedIn: boolean;\r\n  loginModalVisible: boolean;\r\n  registerModalVisible: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: UserState = {\r\n  currentUser: null,\r\n  isLoggedIn: false,\r\n  loginModalVisible: false,\r\n  registerModalVisible: false,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    // 设置当前用户（模拟登录）\r\n    setCurrentUser: (state, action: PayloadAction<User>) => {\r\n      state.currentUser = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.loginModalVisible = false;\r\n      state.error = null;\r\n    },\r\n    \r\n    // 清除当前用户（登出）\r\n    clearCurrentUser: (state) => {\r\n      state.currentUser = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    \r\n    // 显示登录模态框\r\n    showLoginModal: (state) => {\r\n      state.loginModalVisible = true;\r\n      state.registerModalVisible = false;\r\n    },\r\n    \r\n    // 隐藏登录模态框\r\n    hideLoginModal: (state) => {\r\n      state.loginModalVisible = false;\r\n      state.error = null;\r\n    },\r\n    \r\n    // 显示注册模态框\r\n    showRegisterModal: (state) => {\r\n      state.registerModalVisible = true;\r\n      state.loginModalVisible = false;\r\n    },\r\n    \r\n    // 隐藏注册模态框\r\n    hideRegisterModal: (state) => {\r\n      state.registerModalVisible = false;\r\n      state.error = null;\r\n    },\r\n    \r\n    // 设置加载状态\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.loading = action.payload;\r\n    },\r\n    \r\n    // 设置错误信息\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    \r\n    // 清除错误信息\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    \r\n    // 模拟登录\r\n    mockLogin: (state, action: PayloadAction<{ username: string; password: string }>) => {\r\n      const { username } = action.payload;\r\n      \r\n      // 模拟用户数据\r\n      const mockUser: User = {\r\n        id: 1,\r\n        username,\r\n        email: `${username}@example.com`,\r\n        phone: '13800138000',\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n      \r\n      state.currentUser = mockUser;\r\n      state.isLoggedIn = true;\r\n      state.loginModalVisible = false;\r\n      state.error = null;\r\n    },\r\n    \r\n    // 模拟注册\r\n    mockRegister: (state, action: PayloadAction<{\r\n      username: string;\r\n      password: string;\r\n      email: string;\r\n      phone: string;\r\n    }>) => {\r\n      const { username, email, phone } = action.payload;\r\n      \r\n      // 模拟用户数据\r\n      const mockUser: User = {\r\n        id: Date.now(), // 使用时间戳作为模拟ID\r\n        username,\r\n        email,\r\n        phone,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n      \r\n      state.currentUser = mockUser;\r\n      state.isLoggedIn = true;\r\n      state.registerModalVisible = false;\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCurrentUser,\r\n  clearCurrentUser,\r\n  showLoginModal,\r\n  hideLoginModal,\r\n  showRegisterModal,\r\n  hideRegisterModal,\r\n  setLoading,\r\n  setError,\r\n  clearError,\r\n  mockLogin,\r\n  mockRegister,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}